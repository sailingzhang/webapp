// source: cactus.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Cactus.AnalysisPicReq', null, global);
goog.exportSymbol('proto.Cactus.AnalysisPicRsp', null, global);
goog.exportSymbol('proto.Cactus.AnalysisPicStreamPopReq', null, global);
goog.exportSymbol('proto.Cactus.AnalysisPicStreamPopRsp', null, global);
goog.exportSymbol('proto.Cactus.AnalysisPicStreamPushReq', null, global);
goog.exportSymbol('proto.Cactus.AnalysisPicStreamPushRsp', null, global);
goog.exportSymbol('proto.Cactus.AnalysisPicStreamStartReq', null, global);
goog.exportSymbol('proto.Cactus.AnalysisPicStreamStartRsp', null, global);
goog.exportSymbol('proto.Cactus.AnalysisPic_Configure', null, global);
goog.exportSymbol('proto.Cactus.CactusConfigure', null, global);
goog.exportSymbol('proto.Cactus.ComDetectInfo', null, global);
goog.exportSymbol('proto.Cactus.DetectAndIdentifyInfo', null, global);
goog.exportSymbol('proto.Cactus.FaceDetectAndIdentifyByPicReq', null, global);
goog.exportSymbol('proto.Cactus.FaceDetectAndIdentifyByPicRsp', null, global);
goog.exportSymbol('proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure', null, global);
goog.exportSymbol('proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure', null, global);
goog.exportSymbol('proto.Cactus.FaceDetectReq', null, global);
goog.exportSymbol('proto.Cactus.FaceDetectRsp', null, global);
goog.exportSymbol('proto.Cactus.FaceDetectType', null, global);
goog.exportSymbol('proto.Cactus.FaceDetect_Mt_Configure', null, global);
goog.exportSymbol('proto.Cactus.FaceDetect_ResNet152', null, global);
goog.exportSymbol('proto.Cactus.FaceNetConfigure', null, global);
goog.exportSymbol('proto.Cactus.FaceNetSimilar_Configure', null, global);
goog.exportSymbol('proto.Cactus.FaceNet_Configure', null, global);
goog.exportSymbol('proto.Cactus.FaceTrack', null, global);
goog.exportSymbol('proto.Cactus.HelloReq', null, global);
goog.exportSymbol('proto.Cactus.HelloRsp', null, global);
goog.exportSymbol('proto.Cactus.IdentifyPersonByThumbnailsReq', null, global);
goog.exportSymbol('proto.Cactus.IdentifyPersonByThumbnailsRsp', null, global);
goog.exportSymbol('proto.Cactus.IdentifyPersonType', null, global);
goog.exportSymbol('proto.Cactus.LicencePlateInfo', null, global);
goog.exportSymbol('proto.Cactus.LicensePlateTrack', null, global);
goog.exportSymbol('proto.Cactus.PedestrianInfo', null, global);
goog.exportSymbol('proto.Cactus.PedestrianTrack', null, global);
goog.exportSymbol('proto.Cactus.PersonInfo', null, global);
goog.exportSymbol('proto.Cactus.Position', null, global);
goog.exportSymbol('proto.Cactus.STOCKOP', null, global);
goog.exportSymbol('proto.Cactus.StockPredict1Req', null, global);
goog.exportSymbol('proto.Cactus.StockPredict1Rsp', null, global);
goog.exportSymbol('proto.Cactus.StockPredict1_Configure', null, global);
goog.exportSymbol('proto.Cactus.TrackStatus', null, global);
goog.exportSymbol('proto.Cactus.VehicleInfo', null, global);
goog.exportSymbol('proto.Cactus.VehicleTrack', null, global);
goog.exportSymbol('proto.Cactus.facePersons', null, global);
goog.exportSymbol('proto.Cactus.facethumbnails', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.Position = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.Position, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.Position.displayName = 'proto.Cactus.Position';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.PersonInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.PersonInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.PersonInfo.displayName = 'proto.Cactus.PersonInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.LicencePlateInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.LicencePlateInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.LicencePlateInfo.displayName = 'proto.Cactus.LicencePlateInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.VehicleInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.VehicleInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.VehicleInfo.displayName = 'proto.Cactus.VehicleInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.PedestrianInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.PedestrianInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.PedestrianInfo.displayName = 'proto.Cactus.PedestrianInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.ComDetectInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.ComDetectInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.ComDetectInfo.displayName = 'proto.Cactus.ComDetectInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.AnalysisPicReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.AnalysisPicReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.AnalysisPicReq.displayName = 'proto.Cactus.AnalysisPicReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.AnalysisPicRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Cactus.AnalysisPicRsp.repeatedFields_, null);
};
goog.inherits(proto.Cactus.AnalysisPicRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.AnalysisPicRsp.displayName = 'proto.Cactus.AnalysisPicRsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.FaceTrack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.FaceTrack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.FaceTrack.displayName = 'proto.Cactus.FaceTrack';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.VehicleTrack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.VehicleTrack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.VehicleTrack.displayName = 'proto.Cactus.VehicleTrack';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.LicensePlateTrack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.LicensePlateTrack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.LicensePlateTrack.displayName = 'proto.Cactus.LicensePlateTrack';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.PedestrianTrack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.PedestrianTrack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.PedestrianTrack.displayName = 'proto.Cactus.PedestrianTrack';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.AnalysisPicStreamStartReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.AnalysisPicStreamStartReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.AnalysisPicStreamStartReq.displayName = 'proto.Cactus.AnalysisPicStreamStartReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.AnalysisPicStreamStartRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.AnalysisPicStreamStartRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.AnalysisPicStreamStartRsp.displayName = 'proto.Cactus.AnalysisPicStreamStartRsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.AnalysisPicStreamPushReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.AnalysisPicStreamPushReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.AnalysisPicStreamPushReq.displayName = 'proto.Cactus.AnalysisPicStreamPushReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.AnalysisPicStreamPushRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.AnalysisPicStreamPushRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.AnalysisPicStreamPushRsp.displayName = 'proto.Cactus.AnalysisPicStreamPushRsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.AnalysisPicStreamPopReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.AnalysisPicStreamPopReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.AnalysisPicStreamPopReq.displayName = 'proto.Cactus.AnalysisPicStreamPopReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.AnalysisPicStreamPopRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Cactus.AnalysisPicStreamPopRsp.repeatedFields_, null);
};
goog.inherits(proto.Cactus.AnalysisPicStreamPopRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.AnalysisPicStreamPopRsp.displayName = 'proto.Cactus.AnalysisPicStreamPopRsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.StockPredict1_Configure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.StockPredict1_Configure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.StockPredict1_Configure.displayName = 'proto.Cactus.StockPredict1_Configure';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.FaceDetect_Mt_Configure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.FaceDetect_Mt_Configure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.FaceDetect_Mt_Configure.displayName = 'proto.Cactus.FaceDetect_Mt_Configure';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.FaceNet_Configure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.FaceNet_Configure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.FaceNet_Configure.displayName = 'proto.Cactus.FaceNet_Configure';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.FaceNetSimilar_Configure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.FaceNetSimilar_Configure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.FaceNetSimilar_Configure.displayName = 'proto.Cactus.FaceNetSimilar_Configure';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.FaceDetect_ResNet152 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.FaceDetect_ResNet152, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.FaceDetect_ResNet152.displayName = 'proto.Cactus.FaceDetect_ResNet152';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.displayName = 'proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure.displayName = 'proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.AnalysisPic_Configure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.AnalysisPic_Configure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.AnalysisPic_Configure.displayName = 'proto.Cactus.AnalysisPic_Configure';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.FaceNetConfigure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.FaceNetConfigure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.FaceNetConfigure.displayName = 'proto.Cactus.FaceNetConfigure';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.CactusConfigure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.CactusConfigure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.CactusConfigure.displayName = 'proto.Cactus.CactusConfigure';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.facethumbnails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.facethumbnails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.facethumbnails.displayName = 'proto.Cactus.facethumbnails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.facePersons = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.facePersons, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.facePersons.displayName = 'proto.Cactus.facePersons';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.IdentifyPersonByThumbnailsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Cactus.IdentifyPersonByThumbnailsReq.repeatedFields_, null);
};
goog.inherits(proto.Cactus.IdentifyPersonByThumbnailsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.IdentifyPersonByThumbnailsReq.displayName = 'proto.Cactus.IdentifyPersonByThumbnailsReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.IdentifyPersonByThumbnailsRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Cactus.IdentifyPersonByThumbnailsRsp.repeatedFields_, null);
};
goog.inherits(proto.Cactus.IdentifyPersonByThumbnailsRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.IdentifyPersonByThumbnailsRsp.displayName = 'proto.Cactus.IdentifyPersonByThumbnailsRsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.FaceDetectReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.FaceDetectReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.FaceDetectReq.displayName = 'proto.Cactus.FaceDetectReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.FaceDetectRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Cactus.FaceDetectRsp.repeatedFields_, null);
};
goog.inherits(proto.Cactus.FaceDetectRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.FaceDetectRsp.displayName = 'proto.Cactus.FaceDetectRsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.DetectAndIdentifyInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.DetectAndIdentifyInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.DetectAndIdentifyInfo.displayName = 'proto.Cactus.DetectAndIdentifyInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.FaceDetectAndIdentifyByPicReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.FaceDetectAndIdentifyByPicReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.FaceDetectAndIdentifyByPicReq.displayName = 'proto.Cactus.FaceDetectAndIdentifyByPicReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.FaceDetectAndIdentifyByPicRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Cactus.FaceDetectAndIdentifyByPicRsp.repeatedFields_, null);
};
goog.inherits(proto.Cactus.FaceDetectAndIdentifyByPicRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.FaceDetectAndIdentifyByPicRsp.displayName = 'proto.Cactus.FaceDetectAndIdentifyByPicRsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.StockPredict1Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Cactus.StockPredict1Req.repeatedFields_, null);
};
goog.inherits(proto.Cactus.StockPredict1Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.StockPredict1Req.displayName = 'proto.Cactus.StockPredict1Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.StockPredict1Rsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.StockPredict1Rsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.StockPredict1Rsp.displayName = 'proto.Cactus.StockPredict1Rsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.HelloReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.HelloReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.HelloReq.displayName = 'proto.Cactus.HelloReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Cactus.HelloRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Cactus.HelloRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Cactus.HelloRsp.displayName = 'proto.Cactus.HelloRsp';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.Position.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.Position.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.Position} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.Position.toObject = function(includeInstance, msg) {
  var f, obj = {
    top: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    left: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    height: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    width: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.Position}
 */
proto.Cactus.Position.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.Position;
  return proto.Cactus.Position.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.Position} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.Position}
 */
proto.Cactus.Position.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTop(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLeft(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWidth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.Position.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.Position.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.Position} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.Position.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTop();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getLeft();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional float top = 1;
 * @return {number}
 */
proto.Cactus.Position.prototype.getTop = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.Position} returns this
 */
proto.Cactus.Position.prototype.setTop = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float left = 2;
 * @return {number}
 */
proto.Cactus.Position.prototype.getLeft = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.Position} returns this
 */
proto.Cactus.Position.prototype.setLeft = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float height = 3;
 * @return {number}
 */
proto.Cactus.Position.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.Position} returns this
 */
proto.Cactus.Position.prototype.setHeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float width = 4;
 * @return {number}
 */
proto.Cactus.Position.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.Position} returns this
 */
proto.Cactus.Position.prototype.setWidth = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.PersonInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.PersonInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.PersonInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.PersonInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    facepos: (f = msg.getFacepos()) && proto.Cactus.Position.toObject(includeInstance, f),
    personid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    isnewperson: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.PersonInfo}
 */
proto.Cactus.PersonInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.PersonInfo;
  return proto.Cactus.PersonInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.PersonInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.PersonInfo}
 */
proto.Cactus.PersonInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Cactus.Position;
      reader.readMessage(value,proto.Cactus.Position.deserializeBinaryFromReader);
      msg.setFacepos(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPersonid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsnewperson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.PersonInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.PersonInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.PersonInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.PersonInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFacepos();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Cactus.Position.serializeBinaryToWriter
    );
  }
  f = message.getPersonid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIsnewperson();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional Position facepos = 1;
 * @return {?proto.Cactus.Position}
 */
proto.Cactus.PersonInfo.prototype.getFacepos = function() {
  return /** @type{?proto.Cactus.Position} */ (
    jspb.Message.getWrapperField(this, proto.Cactus.Position, 1));
};


/**
 * @param {?proto.Cactus.Position|undefined} value
 * @return {!proto.Cactus.PersonInfo} returns this
*/
proto.Cactus.PersonInfo.prototype.setFacepos = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Cactus.PersonInfo} returns this
 */
proto.Cactus.PersonInfo.prototype.clearFacepos = function() {
  return this.setFacepos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Cactus.PersonInfo.prototype.hasFacepos = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string personid = 2;
 * @return {string}
 */
proto.Cactus.PersonInfo.prototype.getPersonid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.PersonInfo} returns this
 */
proto.Cactus.PersonInfo.prototype.setPersonid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool isNewPerson = 3;
 * @return {boolean}
 */
proto.Cactus.PersonInfo.prototype.getIsnewperson = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Cactus.PersonInfo} returns this
 */
proto.Cactus.PersonInfo.prototype.setIsnewperson = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.LicencePlateInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.LicencePlateInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.LicencePlateInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.LicencePlateInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    licpos: (f = msg.getLicpos()) && proto.Cactus.Position.toObject(includeInstance, f),
    licenceid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.LicencePlateInfo}
 */
proto.Cactus.LicencePlateInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.LicencePlateInfo;
  return proto.Cactus.LicencePlateInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.LicencePlateInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.LicencePlateInfo}
 */
proto.Cactus.LicencePlateInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Cactus.Position;
      reader.readMessage(value,proto.Cactus.Position.deserializeBinaryFromReader);
      msg.setLicpos(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLicenceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.LicencePlateInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.LicencePlateInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.LicencePlateInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.LicencePlateInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLicpos();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Cactus.Position.serializeBinaryToWriter
    );
  }
  f = message.getLicenceid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Position licPos = 1;
 * @return {?proto.Cactus.Position}
 */
proto.Cactus.LicencePlateInfo.prototype.getLicpos = function() {
  return /** @type{?proto.Cactus.Position} */ (
    jspb.Message.getWrapperField(this, proto.Cactus.Position, 1));
};


/**
 * @param {?proto.Cactus.Position|undefined} value
 * @return {!proto.Cactus.LicencePlateInfo} returns this
*/
proto.Cactus.LicencePlateInfo.prototype.setLicpos = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Cactus.LicencePlateInfo} returns this
 */
proto.Cactus.LicencePlateInfo.prototype.clearLicpos = function() {
  return this.setLicpos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Cactus.LicencePlateInfo.prototype.hasLicpos = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string licenceId = 2;
 * @return {string}
 */
proto.Cactus.LicencePlateInfo.prototype.getLicenceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.LicencePlateInfo} returns this
 */
proto.Cactus.LicencePlateInfo.prototype.setLicenceid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.VehicleInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.VehicleInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.VehicleInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.VehicleInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    vehiclepos: (f = msg.getVehiclepos()) && proto.Cactus.Position.toObject(includeInstance, f),
    licenceplate: (f = msg.getLicenceplate()) && proto.Cactus.LicencePlateInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.VehicleInfo}
 */
proto.Cactus.VehicleInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.VehicleInfo;
  return proto.Cactus.VehicleInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.VehicleInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.VehicleInfo}
 */
proto.Cactus.VehicleInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Cactus.Position;
      reader.readMessage(value,proto.Cactus.Position.deserializeBinaryFromReader);
      msg.setVehiclepos(value);
      break;
    case 2:
      var value = new proto.Cactus.LicencePlateInfo;
      reader.readMessage(value,proto.Cactus.LicencePlateInfo.deserializeBinaryFromReader);
      msg.setLicenceplate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.VehicleInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.VehicleInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.VehicleInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.VehicleInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVehiclepos();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Cactus.Position.serializeBinaryToWriter
    );
  }
  f = message.getLicenceplate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Cactus.LicencePlateInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional Position vehiclePos = 1;
 * @return {?proto.Cactus.Position}
 */
proto.Cactus.VehicleInfo.prototype.getVehiclepos = function() {
  return /** @type{?proto.Cactus.Position} */ (
    jspb.Message.getWrapperField(this, proto.Cactus.Position, 1));
};


/**
 * @param {?proto.Cactus.Position|undefined} value
 * @return {!proto.Cactus.VehicleInfo} returns this
*/
proto.Cactus.VehicleInfo.prototype.setVehiclepos = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Cactus.VehicleInfo} returns this
 */
proto.Cactus.VehicleInfo.prototype.clearVehiclepos = function() {
  return this.setVehiclepos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Cactus.VehicleInfo.prototype.hasVehiclepos = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LicencePlateInfo licenceplate = 2;
 * @return {?proto.Cactus.LicencePlateInfo}
 */
proto.Cactus.VehicleInfo.prototype.getLicenceplate = function() {
  return /** @type{?proto.Cactus.LicencePlateInfo} */ (
    jspb.Message.getWrapperField(this, proto.Cactus.LicencePlateInfo, 2));
};


/**
 * @param {?proto.Cactus.LicencePlateInfo|undefined} value
 * @return {!proto.Cactus.VehicleInfo} returns this
*/
proto.Cactus.VehicleInfo.prototype.setLicenceplate = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Cactus.VehicleInfo} returns this
 */
proto.Cactus.VehicleInfo.prototype.clearLicenceplate = function() {
  return this.setLicenceplate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Cactus.VehicleInfo.prototype.hasLicenceplate = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.PedestrianInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.PedestrianInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.PedestrianInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.PedestrianInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    pedestrianpos: (f = msg.getPedestrianpos()) && proto.Cactus.Position.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.PedestrianInfo}
 */
proto.Cactus.PedestrianInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.PedestrianInfo;
  return proto.Cactus.PedestrianInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.PedestrianInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.PedestrianInfo}
 */
proto.Cactus.PedestrianInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Cactus.Position;
      reader.readMessage(value,proto.Cactus.Position.deserializeBinaryFromReader);
      msg.setPedestrianpos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.PedestrianInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.PedestrianInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.PedestrianInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.PedestrianInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPedestrianpos();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Cactus.Position.serializeBinaryToWriter
    );
  }
};


/**
 * optional Position PedestrianPos = 1;
 * @return {?proto.Cactus.Position}
 */
proto.Cactus.PedestrianInfo.prototype.getPedestrianpos = function() {
  return /** @type{?proto.Cactus.Position} */ (
    jspb.Message.getWrapperField(this, proto.Cactus.Position, 1));
};


/**
 * @param {?proto.Cactus.Position|undefined} value
 * @return {!proto.Cactus.PedestrianInfo} returns this
*/
proto.Cactus.PedestrianInfo.prototype.setPedestrianpos = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Cactus.PedestrianInfo} returns this
 */
proto.Cactus.PedestrianInfo.prototype.clearPedestrianpos = function() {
  return this.setPedestrianpos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Cactus.PedestrianInfo.prototype.hasPedestrianpos = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.ComDetectInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.ComDetectInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.ComDetectInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.ComDetectInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    classid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    classname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    id: jspb.Message.getFieldWithDefault(msg, 3, ""),
    pos: (f = msg.getPos()) && proto.Cactus.Position.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.ComDetectInfo}
 */
proto.Cactus.ComDetectInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.ComDetectInfo;
  return proto.Cactus.ComDetectInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.ComDetectInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.ComDetectInfo}
 */
proto.Cactus.ComDetectInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClassid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 4:
      var value = new proto.Cactus.Position;
      reader.readMessage(value,proto.Cactus.Position.deserializeBinaryFromReader);
      msg.setPos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.ComDetectInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.ComDetectInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.ComDetectInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.ComDetectInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClassid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getClassname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPos();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Cactus.Position.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 classId = 1;
 * @return {number}
 */
proto.Cactus.ComDetectInfo.prototype.getClassid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.ComDetectInfo} returns this
 */
proto.Cactus.ComDetectInfo.prototype.setClassid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string className = 2;
 * @return {string}
 */
proto.Cactus.ComDetectInfo.prototype.getClassname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.ComDetectInfo} returns this
 */
proto.Cactus.ComDetectInfo.prototype.setClassname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Id = 3;
 * @return {string}
 */
proto.Cactus.ComDetectInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.ComDetectInfo} returns this
 */
proto.Cactus.ComDetectInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Position Pos = 4;
 * @return {?proto.Cactus.Position}
 */
proto.Cactus.ComDetectInfo.prototype.getPos = function() {
  return /** @type{?proto.Cactus.Position} */ (
    jspb.Message.getWrapperField(this, proto.Cactus.Position, 4));
};


/**
 * @param {?proto.Cactus.Position|undefined} value
 * @return {!proto.Cactus.ComDetectInfo} returns this
*/
proto.Cactus.ComDetectInfo.prototype.setPos = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Cactus.ComDetectInfo} returns this
 */
proto.Cactus.ComDetectInfo.prototype.clearPos = function() {
  return this.setPos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Cactus.ComDetectInfo.prototype.hasPos = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.AnalysisPicReq.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.AnalysisPicReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.AnalysisPicReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.AnalysisPicReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    groupid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    picdata: msg.getPicdata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.AnalysisPicReq}
 */
proto.Cactus.AnalysisPicReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.AnalysisPicReq;
  return proto.Cactus.AnalysisPicReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.AnalysisPicReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.AnalysisPicReq}
 */
proto.Cactus.AnalysisPicReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPicdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.AnalysisPicReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.AnalysisPicReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.AnalysisPicReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.AnalysisPicReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getGroupid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPicdata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.Cactus.AnalysisPicReq.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.AnalysisPicReq} returns this
 */
proto.Cactus.AnalysisPicReq.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string groupid = 2;
 * @return {string}
 */
proto.Cactus.AnalysisPicReq.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.AnalysisPicReq} returns this
 */
proto.Cactus.AnalysisPicReq.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes picdata = 3;
 * @return {!(string|Uint8Array)}
 */
proto.Cactus.AnalysisPicReq.prototype.getPicdata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes picdata = 3;
 * This is a type-conversion wrapper around `getPicdata()`
 * @return {string}
 */
proto.Cactus.AnalysisPicReq.prototype.getPicdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPicdata()));
};


/**
 * optional bytes picdata = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPicdata()`
 * @return {!Uint8Array}
 */
proto.Cactus.AnalysisPicReq.prototype.getPicdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPicdata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Cactus.AnalysisPicReq} returns this
 */
proto.Cactus.AnalysisPicReq.prototype.setPicdata = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Cactus.AnalysisPicRsp.repeatedFields_ = [2,3,4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.AnalysisPicRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.AnalysisPicRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.AnalysisPicRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.AnalysisPicRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    personInfosList: jspb.Message.toObjectList(msg.getPersonInfosList(),
    proto.Cactus.PersonInfo.toObject, includeInstance),
    velicleInfosList: jspb.Message.toObjectList(msg.getVelicleInfosList(),
    proto.Cactus.VehicleInfo.toObject, includeInstance),
    pedestrianInfosList: jspb.Message.toObjectList(msg.getPedestrianInfosList(),
    proto.Cactus.PedestrianInfo.toObject, includeInstance),
    comdetectInfosList: jspb.Message.toObjectList(msg.getComdetectInfosList(),
    proto.Cactus.ComDetectInfo.toObject, includeInstance),
    semanticSegmentationInfosList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    error: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.AnalysisPicRsp}
 */
proto.Cactus.AnalysisPicRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.AnalysisPicRsp;
  return proto.Cactus.AnalysisPicRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.AnalysisPicRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.AnalysisPicRsp}
 */
proto.Cactus.AnalysisPicRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.Cactus.PersonInfo;
      reader.readMessage(value,proto.Cactus.PersonInfo.deserializeBinaryFromReader);
      msg.addPersonInfos(value);
      break;
    case 3:
      var value = new proto.Cactus.VehicleInfo;
      reader.readMessage(value,proto.Cactus.VehicleInfo.deserializeBinaryFromReader);
      msg.addVelicleInfos(value);
      break;
    case 4:
      var value = new proto.Cactus.PedestrianInfo;
      reader.readMessage(value,proto.Cactus.PedestrianInfo.deserializeBinaryFromReader);
      msg.addPedestrianInfos(value);
      break;
    case 5:
      var value = new proto.Cactus.ComDetectInfo;
      reader.readMessage(value,proto.Cactus.ComDetectInfo.deserializeBinaryFromReader);
      msg.addComdetectInfos(value);
      break;
    case 6:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setSemanticSegmentationInfosList(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.AnalysisPicRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.AnalysisPicRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.AnalysisPicRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.AnalysisPicRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPersonInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Cactus.PersonInfo.serializeBinaryToWriter
    );
  }
  f = message.getVelicleInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Cactus.VehicleInfo.serializeBinaryToWriter
    );
  }
  f = message.getPedestrianInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.Cactus.PedestrianInfo.serializeBinaryToWriter
    );
  }
  f = message.getComdetectInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.Cactus.ComDetectInfo.serializeBinaryToWriter
    );
  }
  f = message.getSemanticSegmentationInfosList();
  if (f.length > 0) {
    writer.writePackedInt32(
      6,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.Cactus.AnalysisPicRsp.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.AnalysisPicRsp} returns this
 */
proto.Cactus.AnalysisPicRsp.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated PersonInfo person_infos = 2;
 * @return {!Array<!proto.Cactus.PersonInfo>}
 */
proto.Cactus.AnalysisPicRsp.prototype.getPersonInfosList = function() {
  return /** @type{!Array<!proto.Cactus.PersonInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Cactus.PersonInfo, 2));
};


/**
 * @param {!Array<!proto.Cactus.PersonInfo>} value
 * @return {!proto.Cactus.AnalysisPicRsp} returns this
*/
proto.Cactus.AnalysisPicRsp.prototype.setPersonInfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Cactus.PersonInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Cactus.PersonInfo}
 */
proto.Cactus.AnalysisPicRsp.prototype.addPersonInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Cactus.PersonInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Cactus.AnalysisPicRsp} returns this
 */
proto.Cactus.AnalysisPicRsp.prototype.clearPersonInfosList = function() {
  return this.setPersonInfosList([]);
};


/**
 * repeated VehicleInfo velicle_infos = 3;
 * @return {!Array<!proto.Cactus.VehicleInfo>}
 */
proto.Cactus.AnalysisPicRsp.prototype.getVelicleInfosList = function() {
  return /** @type{!Array<!proto.Cactus.VehicleInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Cactus.VehicleInfo, 3));
};


/**
 * @param {!Array<!proto.Cactus.VehicleInfo>} value
 * @return {!proto.Cactus.AnalysisPicRsp} returns this
*/
proto.Cactus.AnalysisPicRsp.prototype.setVelicleInfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Cactus.VehicleInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Cactus.VehicleInfo}
 */
proto.Cactus.AnalysisPicRsp.prototype.addVelicleInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Cactus.VehicleInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Cactus.AnalysisPicRsp} returns this
 */
proto.Cactus.AnalysisPicRsp.prototype.clearVelicleInfosList = function() {
  return this.setVelicleInfosList([]);
};


/**
 * repeated PedestrianInfo pedestrian_infos = 4;
 * @return {!Array<!proto.Cactus.PedestrianInfo>}
 */
proto.Cactus.AnalysisPicRsp.prototype.getPedestrianInfosList = function() {
  return /** @type{!Array<!proto.Cactus.PedestrianInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Cactus.PedestrianInfo, 4));
};


/**
 * @param {!Array<!proto.Cactus.PedestrianInfo>} value
 * @return {!proto.Cactus.AnalysisPicRsp} returns this
*/
proto.Cactus.AnalysisPicRsp.prototype.setPedestrianInfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Cactus.PedestrianInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Cactus.PedestrianInfo}
 */
proto.Cactus.AnalysisPicRsp.prototype.addPedestrianInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Cactus.PedestrianInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Cactus.AnalysisPicRsp} returns this
 */
proto.Cactus.AnalysisPicRsp.prototype.clearPedestrianInfosList = function() {
  return this.setPedestrianInfosList([]);
};


/**
 * repeated ComDetectInfo comdetect_infos = 5;
 * @return {!Array<!proto.Cactus.ComDetectInfo>}
 */
proto.Cactus.AnalysisPicRsp.prototype.getComdetectInfosList = function() {
  return /** @type{!Array<!proto.Cactus.ComDetectInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Cactus.ComDetectInfo, 5));
};


/**
 * @param {!Array<!proto.Cactus.ComDetectInfo>} value
 * @return {!proto.Cactus.AnalysisPicRsp} returns this
*/
proto.Cactus.AnalysisPicRsp.prototype.setComdetectInfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.Cactus.ComDetectInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Cactus.ComDetectInfo}
 */
proto.Cactus.AnalysisPicRsp.prototype.addComdetectInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.Cactus.ComDetectInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Cactus.AnalysisPicRsp} returns this
 */
proto.Cactus.AnalysisPicRsp.prototype.clearComdetectInfosList = function() {
  return this.setComdetectInfosList([]);
};


/**
 * repeated int32 semantic_segmentation_infos = 6;
 * @return {!Array<number>}
 */
proto.Cactus.AnalysisPicRsp.prototype.getSemanticSegmentationInfosList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Cactus.AnalysisPicRsp} returns this
 */
proto.Cactus.AnalysisPicRsp.prototype.setSemanticSegmentationInfosList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Cactus.AnalysisPicRsp} returns this
 */
proto.Cactus.AnalysisPicRsp.prototype.addSemanticSegmentationInfos = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Cactus.AnalysisPicRsp} returns this
 */
proto.Cactus.AnalysisPicRsp.prototype.clearSemanticSegmentationInfosList = function() {
  return this.setSemanticSegmentationInfosList([]);
};


/**
 * optional string error = 7;
 * @return {string}
 */
proto.Cactus.AnalysisPicRsp.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.AnalysisPicRsp} returns this
 */
proto.Cactus.AnalysisPicRsp.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.FaceTrack.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.FaceTrack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.FaceTrack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.FaceTrack.toObject = function(includeInstance, msg) {
  var f, obj = {
    personId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    trackingId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pos: (f = msg.getPos()) && proto.Cactus.Position.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.FaceTrack}
 */
proto.Cactus.FaceTrack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.FaceTrack;
  return proto.Cactus.FaceTrack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.FaceTrack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.FaceTrack}
 */
proto.Cactus.FaceTrack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPersonId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrackingId(value);
      break;
    case 3:
      var value = /** @type {!proto.Cactus.TrackStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 4:
      var value = new proto.Cactus.Position;
      reader.readMessage(value,proto.Cactus.Position.deserializeBinaryFromReader);
      msg.setPos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.FaceTrack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.FaceTrack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.FaceTrack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.FaceTrack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPersonId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTrackingId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getPos();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Cactus.Position.serializeBinaryToWriter
    );
  }
};


/**
 * optional string person_id = 1;
 * @return {string}
 */
proto.Cactus.FaceTrack.prototype.getPersonId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.FaceTrack} returns this
 */
proto.Cactus.FaceTrack.prototype.setPersonId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tracking_id = 2;
 * @return {string}
 */
proto.Cactus.FaceTrack.prototype.getTrackingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.FaceTrack} returns this
 */
proto.Cactus.FaceTrack.prototype.setTrackingId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional TrackStatus status = 3;
 * @return {!proto.Cactus.TrackStatus}
 */
proto.Cactus.FaceTrack.prototype.getStatus = function() {
  return /** @type {!proto.Cactus.TrackStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.Cactus.TrackStatus} value
 * @return {!proto.Cactus.FaceTrack} returns this
 */
proto.Cactus.FaceTrack.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Position pos = 4;
 * @return {?proto.Cactus.Position}
 */
proto.Cactus.FaceTrack.prototype.getPos = function() {
  return /** @type{?proto.Cactus.Position} */ (
    jspb.Message.getWrapperField(this, proto.Cactus.Position, 4));
};


/**
 * @param {?proto.Cactus.Position|undefined} value
 * @return {!proto.Cactus.FaceTrack} returns this
*/
proto.Cactus.FaceTrack.prototype.setPos = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Cactus.FaceTrack} returns this
 */
proto.Cactus.FaceTrack.prototype.clearPos = function() {
  return this.setPos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Cactus.FaceTrack.prototype.hasPos = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.VehicleTrack.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.VehicleTrack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.VehicleTrack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.VehicleTrack.toObject = function(includeInstance, msg) {
  var f, obj = {
    trackingId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pos: (f = msg.getPos()) && proto.Cactus.Position.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.VehicleTrack}
 */
proto.Cactus.VehicleTrack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.VehicleTrack;
  return proto.Cactus.VehicleTrack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.VehicleTrack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.VehicleTrack}
 */
proto.Cactus.VehicleTrack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrackingId(value);
      break;
    case 2:
      var value = /** @type {!proto.Cactus.TrackStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = new proto.Cactus.Position;
      reader.readMessage(value,proto.Cactus.Position.deserializeBinaryFromReader);
      msg.setPos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.VehicleTrack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.VehicleTrack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.VehicleTrack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.VehicleTrack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrackingId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPos();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Cactus.Position.serializeBinaryToWriter
    );
  }
};


/**
 * optional string tracking_id = 1;
 * @return {string}
 */
proto.Cactus.VehicleTrack.prototype.getTrackingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.VehicleTrack} returns this
 */
proto.Cactus.VehicleTrack.prototype.setTrackingId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TrackStatus status = 2;
 * @return {!proto.Cactus.TrackStatus}
 */
proto.Cactus.VehicleTrack.prototype.getStatus = function() {
  return /** @type {!proto.Cactus.TrackStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Cactus.TrackStatus} value
 * @return {!proto.Cactus.VehicleTrack} returns this
 */
proto.Cactus.VehicleTrack.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Position pos = 3;
 * @return {?proto.Cactus.Position}
 */
proto.Cactus.VehicleTrack.prototype.getPos = function() {
  return /** @type{?proto.Cactus.Position} */ (
    jspb.Message.getWrapperField(this, proto.Cactus.Position, 3));
};


/**
 * @param {?proto.Cactus.Position|undefined} value
 * @return {!proto.Cactus.VehicleTrack} returns this
*/
proto.Cactus.VehicleTrack.prototype.setPos = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Cactus.VehicleTrack} returns this
 */
proto.Cactus.VehicleTrack.prototype.clearPos = function() {
  return this.setPos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Cactus.VehicleTrack.prototype.hasPos = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.LicensePlateTrack.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.LicensePlateTrack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.LicensePlateTrack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.LicensePlateTrack.toObject = function(includeInstance, msg) {
  var f, obj = {
    plateId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    trackingId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pos: (f = msg.getPos()) && proto.Cactus.Position.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.LicensePlateTrack}
 */
proto.Cactus.LicensePlateTrack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.LicensePlateTrack;
  return proto.Cactus.LicensePlateTrack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.LicensePlateTrack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.LicensePlateTrack}
 */
proto.Cactus.LicensePlateTrack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlateId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrackingId(value);
      break;
    case 3:
      var value = /** @type {!proto.Cactus.TrackStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 4:
      var value = new proto.Cactus.Position;
      reader.readMessage(value,proto.Cactus.Position.deserializeBinaryFromReader);
      msg.setPos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.LicensePlateTrack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.LicensePlateTrack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.LicensePlateTrack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.LicensePlateTrack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlateId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTrackingId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getPos();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Cactus.Position.serializeBinaryToWriter
    );
  }
};


/**
 * optional string plate_id = 1;
 * @return {string}
 */
proto.Cactus.LicensePlateTrack.prototype.getPlateId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.LicensePlateTrack} returns this
 */
proto.Cactus.LicensePlateTrack.prototype.setPlateId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tracking_id = 2;
 * @return {string}
 */
proto.Cactus.LicensePlateTrack.prototype.getTrackingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.LicensePlateTrack} returns this
 */
proto.Cactus.LicensePlateTrack.prototype.setTrackingId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional TrackStatus status = 3;
 * @return {!proto.Cactus.TrackStatus}
 */
proto.Cactus.LicensePlateTrack.prototype.getStatus = function() {
  return /** @type {!proto.Cactus.TrackStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.Cactus.TrackStatus} value
 * @return {!proto.Cactus.LicensePlateTrack} returns this
 */
proto.Cactus.LicensePlateTrack.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Position pos = 4;
 * @return {?proto.Cactus.Position}
 */
proto.Cactus.LicensePlateTrack.prototype.getPos = function() {
  return /** @type{?proto.Cactus.Position} */ (
    jspb.Message.getWrapperField(this, proto.Cactus.Position, 4));
};


/**
 * @param {?proto.Cactus.Position|undefined} value
 * @return {!proto.Cactus.LicensePlateTrack} returns this
*/
proto.Cactus.LicensePlateTrack.prototype.setPos = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Cactus.LicensePlateTrack} returns this
 */
proto.Cactus.LicensePlateTrack.prototype.clearPos = function() {
  return this.setPos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Cactus.LicensePlateTrack.prototype.hasPos = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.PedestrianTrack.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.PedestrianTrack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.PedestrianTrack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.PedestrianTrack.toObject = function(includeInstance, msg) {
  var f, obj = {
    trackingId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pos: (f = msg.getPos()) && proto.Cactus.Position.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.PedestrianTrack}
 */
proto.Cactus.PedestrianTrack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.PedestrianTrack;
  return proto.Cactus.PedestrianTrack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.PedestrianTrack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.PedestrianTrack}
 */
proto.Cactus.PedestrianTrack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrackingId(value);
      break;
    case 2:
      var value = /** @type {!proto.Cactus.TrackStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = new proto.Cactus.Position;
      reader.readMessage(value,proto.Cactus.Position.deserializeBinaryFromReader);
      msg.setPos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.PedestrianTrack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.PedestrianTrack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.PedestrianTrack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.PedestrianTrack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrackingId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPos();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Cactus.Position.serializeBinaryToWriter
    );
  }
};


/**
 * optional string tracking_id = 1;
 * @return {string}
 */
proto.Cactus.PedestrianTrack.prototype.getTrackingId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.PedestrianTrack} returns this
 */
proto.Cactus.PedestrianTrack.prototype.setTrackingId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TrackStatus status = 2;
 * @return {!proto.Cactus.TrackStatus}
 */
proto.Cactus.PedestrianTrack.prototype.getStatus = function() {
  return /** @type {!proto.Cactus.TrackStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Cactus.TrackStatus} value
 * @return {!proto.Cactus.PedestrianTrack} returns this
 */
proto.Cactus.PedestrianTrack.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Position pos = 3;
 * @return {?proto.Cactus.Position}
 */
proto.Cactus.PedestrianTrack.prototype.getPos = function() {
  return /** @type{?proto.Cactus.Position} */ (
    jspb.Message.getWrapperField(this, proto.Cactus.Position, 3));
};


/**
 * @param {?proto.Cactus.Position|undefined} value
 * @return {!proto.Cactus.PedestrianTrack} returns this
*/
proto.Cactus.PedestrianTrack.prototype.setPos = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Cactus.PedestrianTrack} returns this
 */
proto.Cactus.PedestrianTrack.prototype.clearPos = function() {
  return this.setPos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Cactus.PedestrianTrack.prototype.hasPos = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.AnalysisPicStreamStartReq.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.AnalysisPicStreamStartReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.AnalysisPicStreamStartReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.AnalysisPicStreamStartReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    faceTrackGroupid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    enableFace: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    enablePedestrian: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    enableVehicle: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    enablePlate: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.AnalysisPicStreamStartReq}
 */
proto.Cactus.AnalysisPicStreamStartReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.AnalysisPicStreamStartReq;
  return proto.Cactus.AnalysisPicStreamStartReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.AnalysisPicStreamStartReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.AnalysisPicStreamStartReq}
 */
proto.Cactus.AnalysisPicStreamStartReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFaceTrackGroupid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableFace(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnablePedestrian(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableVehicle(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnablePlate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.AnalysisPicStreamStartReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.AnalysisPicStreamStartReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.AnalysisPicStreamStartReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.AnalysisPicStreamStartReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFaceTrackGroupid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEnableFace();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getEnablePedestrian();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getEnableVehicle();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getEnablePlate();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string channel_name = 1;
 * @return {string}
 */
proto.Cactus.AnalysisPicStreamStartReq.prototype.getChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.AnalysisPicStreamStartReq} returns this
 */
proto.Cactus.AnalysisPicStreamStartReq.prototype.setChannelName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string face_track_groupid = 2;
 * @return {string}
 */
proto.Cactus.AnalysisPicStreamStartReq.prototype.getFaceTrackGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.AnalysisPicStreamStartReq} returns this
 */
proto.Cactus.AnalysisPicStreamStartReq.prototype.setFaceTrackGroupid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool enable_face = 3;
 * @return {boolean}
 */
proto.Cactus.AnalysisPicStreamStartReq.prototype.getEnableFace = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Cactus.AnalysisPicStreamStartReq} returns this
 */
proto.Cactus.AnalysisPicStreamStartReq.prototype.setEnableFace = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool enable_pedestrian = 4;
 * @return {boolean}
 */
proto.Cactus.AnalysisPicStreamStartReq.prototype.getEnablePedestrian = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Cactus.AnalysisPicStreamStartReq} returns this
 */
proto.Cactus.AnalysisPicStreamStartReq.prototype.setEnablePedestrian = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool enable_vehicle = 5;
 * @return {boolean}
 */
proto.Cactus.AnalysisPicStreamStartReq.prototype.getEnableVehicle = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Cactus.AnalysisPicStreamStartReq} returns this
 */
proto.Cactus.AnalysisPicStreamStartReq.prototype.setEnableVehicle = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool enable_plate = 6;
 * @return {boolean}
 */
proto.Cactus.AnalysisPicStreamStartReq.prototype.getEnablePlate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Cactus.AnalysisPicStreamStartReq} returns this
 */
proto.Cactus.AnalysisPicStreamStartReq.prototype.setEnablePlate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.AnalysisPicStreamStartRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.AnalysisPicStreamStartRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.AnalysisPicStreamStartRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.AnalysisPicStreamStartRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.AnalysisPicStreamStartRsp}
 */
proto.Cactus.AnalysisPicStreamStartRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.AnalysisPicStreamStartRsp;
  return proto.Cactus.AnalysisPicStreamStartRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.AnalysisPicStreamStartRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.AnalysisPicStreamStartRsp}
 */
proto.Cactus.AnalysisPicStreamStartRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.AnalysisPicStreamStartRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.AnalysisPicStreamStartRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.AnalysisPicStreamStartRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.AnalysisPicStreamStartRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string error = 1;
 * @return {string}
 */
proto.Cactus.AnalysisPicStreamStartRsp.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.AnalysisPicStreamStartRsp} returns this
 */
proto.Cactus.AnalysisPicStreamStartRsp.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.AnalysisPicStreamPushReq.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.AnalysisPicStreamPushReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.AnalysisPicStreamPushReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.AnalysisPicStreamPushReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    frameId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    picdata: msg.getPicdata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.AnalysisPicStreamPushReq}
 */
proto.Cactus.AnalysisPicStreamPushReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.AnalysisPicStreamPushReq;
  return proto.Cactus.AnalysisPicStreamPushReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.AnalysisPicStreamPushReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.AnalysisPicStreamPushReq}
 */
proto.Cactus.AnalysisPicStreamPushReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFrameId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPicdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.AnalysisPicStreamPushReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.AnalysisPicStreamPushReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.AnalysisPicStreamPushReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.AnalysisPicStreamPushReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFrameId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getPicdata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string channel_name = 1;
 * @return {string}
 */
proto.Cactus.AnalysisPicStreamPushReq.prototype.getChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.AnalysisPicStreamPushReq} returns this
 */
proto.Cactus.AnalysisPicStreamPushReq.prototype.setChannelName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 frame_id = 2;
 * @return {number}
 */
proto.Cactus.AnalysisPicStreamPushReq.prototype.getFrameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.AnalysisPicStreamPushReq} returns this
 */
proto.Cactus.AnalysisPicStreamPushReq.prototype.setFrameId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes picdata = 3;
 * @return {!(string|Uint8Array)}
 */
proto.Cactus.AnalysisPicStreamPushReq.prototype.getPicdata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes picdata = 3;
 * This is a type-conversion wrapper around `getPicdata()`
 * @return {string}
 */
proto.Cactus.AnalysisPicStreamPushReq.prototype.getPicdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPicdata()));
};


/**
 * optional bytes picdata = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPicdata()`
 * @return {!Uint8Array}
 */
proto.Cactus.AnalysisPicStreamPushReq.prototype.getPicdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPicdata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Cactus.AnalysisPicStreamPushReq} returns this
 */
proto.Cactus.AnalysisPicStreamPushReq.prototype.setPicdata = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.AnalysisPicStreamPushRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.AnalysisPicStreamPushRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.AnalysisPicStreamPushRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.AnalysisPicStreamPushRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.AnalysisPicStreamPushRsp}
 */
proto.Cactus.AnalysisPicStreamPushRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.AnalysisPicStreamPushRsp;
  return proto.Cactus.AnalysisPicStreamPushRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.AnalysisPicStreamPushRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.AnalysisPicStreamPushRsp}
 */
proto.Cactus.AnalysisPicStreamPushRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.AnalysisPicStreamPushRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.AnalysisPicStreamPushRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.AnalysisPicStreamPushRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.AnalysisPicStreamPushRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string error = 1;
 * @return {string}
 */
proto.Cactus.AnalysisPicStreamPushRsp.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.AnalysisPicStreamPushRsp} returns this
 */
proto.Cactus.AnalysisPicStreamPushRsp.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.AnalysisPicStreamPopReq.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.AnalysisPicStreamPopReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.AnalysisPicStreamPopReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.AnalysisPicStreamPopReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.AnalysisPicStreamPopReq}
 */
proto.Cactus.AnalysisPicStreamPopReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.AnalysisPicStreamPopReq;
  return proto.Cactus.AnalysisPicStreamPopReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.AnalysisPicStreamPopReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.AnalysisPicStreamPopReq}
 */
proto.Cactus.AnalysisPicStreamPopReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.AnalysisPicStreamPopReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.AnalysisPicStreamPopReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.AnalysisPicStreamPopReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.AnalysisPicStreamPopReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string channel_name = 1;
 * @return {string}
 */
proto.Cactus.AnalysisPicStreamPopReq.prototype.getChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.AnalysisPicStreamPopReq} returns this
 */
proto.Cactus.AnalysisPicStreamPopReq.prototype.setChannelName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Cactus.AnalysisPicStreamPopRsp.repeatedFields_ = [4,5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.AnalysisPicStreamPopRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.AnalysisPicStreamPopRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.AnalysisPicStreamPopRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.AnalysisPicStreamPopRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, ""),
    channelName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    frameId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    faceTracksList: jspb.Message.toObjectList(msg.getFaceTracksList(),
    proto.Cactus.FaceTrack.toObject, includeInstance),
    vehicleTracksList: jspb.Message.toObjectList(msg.getVehicleTracksList(),
    proto.Cactus.VehicleTrack.toObject, includeInstance),
    licenseplateTracksList: jspb.Message.toObjectList(msg.getLicenseplateTracksList(),
    proto.Cactus.LicensePlateTrack.toObject, includeInstance),
    pedestrianTracksList: jspb.Message.toObjectList(msg.getPedestrianTracksList(),
    proto.Cactus.PedestrianTrack.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.AnalysisPicStreamPopRsp}
 */
proto.Cactus.AnalysisPicStreamPopRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.AnalysisPicStreamPopRsp;
  return proto.Cactus.AnalysisPicStreamPopRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.AnalysisPicStreamPopRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.AnalysisPicStreamPopRsp}
 */
proto.Cactus.AnalysisPicStreamPopRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFrameId(value);
      break;
    case 4:
      var value = new proto.Cactus.FaceTrack;
      reader.readMessage(value,proto.Cactus.FaceTrack.deserializeBinaryFromReader);
      msg.addFaceTracks(value);
      break;
    case 5:
      var value = new proto.Cactus.VehicleTrack;
      reader.readMessage(value,proto.Cactus.VehicleTrack.deserializeBinaryFromReader);
      msg.addVehicleTracks(value);
      break;
    case 6:
      var value = new proto.Cactus.LicensePlateTrack;
      reader.readMessage(value,proto.Cactus.LicensePlateTrack.deserializeBinaryFromReader);
      msg.addLicenseplateTracks(value);
      break;
    case 7:
      var value = new proto.Cactus.PedestrianTrack;
      reader.readMessage(value,proto.Cactus.PedestrianTrack.deserializeBinaryFromReader);
      msg.addPedestrianTracks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.AnalysisPicStreamPopRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.AnalysisPicStreamPopRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.AnalysisPicStreamPopRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.AnalysisPicStreamPopRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChannelName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFrameId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getFaceTracksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.Cactus.FaceTrack.serializeBinaryToWriter
    );
  }
  f = message.getVehicleTracksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.Cactus.VehicleTrack.serializeBinaryToWriter
    );
  }
  f = message.getLicenseplateTracksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.Cactus.LicensePlateTrack.serializeBinaryToWriter
    );
  }
  f = message.getPedestrianTracksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.Cactus.PedestrianTrack.serializeBinaryToWriter
    );
  }
};


/**
 * optional string error = 1;
 * @return {string}
 */
proto.Cactus.AnalysisPicStreamPopRsp.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.AnalysisPicStreamPopRsp} returns this
 */
proto.Cactus.AnalysisPicStreamPopRsp.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string channel_name = 2;
 * @return {string}
 */
proto.Cactus.AnalysisPicStreamPopRsp.prototype.getChannelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.AnalysisPicStreamPopRsp} returns this
 */
proto.Cactus.AnalysisPicStreamPopRsp.prototype.setChannelName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 frame_id = 3;
 * @return {number}
 */
proto.Cactus.AnalysisPicStreamPopRsp.prototype.getFrameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.AnalysisPicStreamPopRsp} returns this
 */
proto.Cactus.AnalysisPicStreamPopRsp.prototype.setFrameId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated FaceTrack face_tracks = 4;
 * @return {!Array<!proto.Cactus.FaceTrack>}
 */
proto.Cactus.AnalysisPicStreamPopRsp.prototype.getFaceTracksList = function() {
  return /** @type{!Array<!proto.Cactus.FaceTrack>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Cactus.FaceTrack, 4));
};


/**
 * @param {!Array<!proto.Cactus.FaceTrack>} value
 * @return {!proto.Cactus.AnalysisPicStreamPopRsp} returns this
*/
proto.Cactus.AnalysisPicStreamPopRsp.prototype.setFaceTracksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Cactus.FaceTrack=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Cactus.FaceTrack}
 */
proto.Cactus.AnalysisPicStreamPopRsp.prototype.addFaceTracks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Cactus.FaceTrack, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Cactus.AnalysisPicStreamPopRsp} returns this
 */
proto.Cactus.AnalysisPicStreamPopRsp.prototype.clearFaceTracksList = function() {
  return this.setFaceTracksList([]);
};


/**
 * repeated VehicleTrack vehicle_tracks = 5;
 * @return {!Array<!proto.Cactus.VehicleTrack>}
 */
proto.Cactus.AnalysisPicStreamPopRsp.prototype.getVehicleTracksList = function() {
  return /** @type{!Array<!proto.Cactus.VehicleTrack>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Cactus.VehicleTrack, 5));
};


/**
 * @param {!Array<!proto.Cactus.VehicleTrack>} value
 * @return {!proto.Cactus.AnalysisPicStreamPopRsp} returns this
*/
proto.Cactus.AnalysisPicStreamPopRsp.prototype.setVehicleTracksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.Cactus.VehicleTrack=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Cactus.VehicleTrack}
 */
proto.Cactus.AnalysisPicStreamPopRsp.prototype.addVehicleTracks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.Cactus.VehicleTrack, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Cactus.AnalysisPicStreamPopRsp} returns this
 */
proto.Cactus.AnalysisPicStreamPopRsp.prototype.clearVehicleTracksList = function() {
  return this.setVehicleTracksList([]);
};


/**
 * repeated LicensePlateTrack licenseplate_tracks = 6;
 * @return {!Array<!proto.Cactus.LicensePlateTrack>}
 */
proto.Cactus.AnalysisPicStreamPopRsp.prototype.getLicenseplateTracksList = function() {
  return /** @type{!Array<!proto.Cactus.LicensePlateTrack>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Cactus.LicensePlateTrack, 6));
};


/**
 * @param {!Array<!proto.Cactus.LicensePlateTrack>} value
 * @return {!proto.Cactus.AnalysisPicStreamPopRsp} returns this
*/
proto.Cactus.AnalysisPicStreamPopRsp.prototype.setLicenseplateTracksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.Cactus.LicensePlateTrack=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Cactus.LicensePlateTrack}
 */
proto.Cactus.AnalysisPicStreamPopRsp.prototype.addLicenseplateTracks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.Cactus.LicensePlateTrack, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Cactus.AnalysisPicStreamPopRsp} returns this
 */
proto.Cactus.AnalysisPicStreamPopRsp.prototype.clearLicenseplateTracksList = function() {
  return this.setLicenseplateTracksList([]);
};


/**
 * repeated PedestrianTrack pedestrian_tracks = 7;
 * @return {!Array<!proto.Cactus.PedestrianTrack>}
 */
proto.Cactus.AnalysisPicStreamPopRsp.prototype.getPedestrianTracksList = function() {
  return /** @type{!Array<!proto.Cactus.PedestrianTrack>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Cactus.PedestrianTrack, 7));
};


/**
 * @param {!Array<!proto.Cactus.PedestrianTrack>} value
 * @return {!proto.Cactus.AnalysisPicStreamPopRsp} returns this
*/
proto.Cactus.AnalysisPicStreamPopRsp.prototype.setPedestrianTracksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.Cactus.PedestrianTrack=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Cactus.PedestrianTrack}
 */
proto.Cactus.AnalysisPicStreamPopRsp.prototype.addPedestrianTracks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.Cactus.PedestrianTrack, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Cactus.AnalysisPicStreamPopRsp} returns this
 */
proto.Cactus.AnalysisPicStreamPopRsp.prototype.clearPedestrianTracksList = function() {
  return this.setPedestrianTracksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.StockPredict1_Configure.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.StockPredict1_Configure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.StockPredict1_Configure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.StockPredict1_Configure.toObject = function(includeInstance, msg) {
  var f, obj = {
    modelName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    modelVersion: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.StockPredict1_Configure}
 */
proto.Cactus.StockPredict1_Configure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.StockPredict1_Configure;
  return proto.Cactus.StockPredict1_Configure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.StockPredict1_Configure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.StockPredict1_Configure}
 */
proto.Cactus.StockPredict1_Configure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setModelVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.StockPredict1_Configure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.StockPredict1_Configure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.StockPredict1_Configure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.StockPredict1_Configure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModelName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getModelVersion();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string model_name = 1;
 * @return {string}
 */
proto.Cactus.StockPredict1_Configure.prototype.getModelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.StockPredict1_Configure} returns this
 */
proto.Cactus.StockPredict1_Configure.prototype.setModelName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 model_version = 2;
 * @return {number}
 */
proto.Cactus.StockPredict1_Configure.prototype.getModelVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.StockPredict1_Configure} returns this
 */
proto.Cactus.StockPredict1_Configure.prototype.setModelVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.FaceDetect_Mt_Configure.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.FaceDetect_Mt_Configure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.FaceDetect_Mt_Configure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.FaceDetect_Mt_Configure.toObject = function(includeInstance, msg) {
  var f, obj = {
    mtcnnModelname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mtcnnMinifacesize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    mtcnnFactor: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    mtcnnPnetThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    mtcnnRnetThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    mtcnnOnetThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    facedetectFilterMinifacearea: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.FaceDetect_Mt_Configure}
 */
proto.Cactus.FaceDetect_Mt_Configure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.FaceDetect_Mt_Configure;
  return proto.Cactus.FaceDetect_Mt_Configure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.FaceDetect_Mt_Configure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.FaceDetect_Mt_Configure}
 */
proto.Cactus.FaceDetect_Mt_Configure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMtcnnModelname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMtcnnMinifacesize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMtcnnFactor(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMtcnnPnetThreshold(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMtcnnRnetThreshold(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMtcnnOnetThreshold(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFacedetectFilterMinifacearea(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.FaceDetect_Mt_Configure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.FaceDetect_Mt_Configure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.FaceDetect_Mt_Configure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.FaceDetect_Mt_Configure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMtcnnModelname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMtcnnMinifacesize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMtcnnFactor();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getMtcnnPnetThreshold();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getMtcnnRnetThreshold();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getMtcnnOnetThreshold();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getFacedetectFilterMinifacearea();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional string mtcnn_modelname = 1;
 * @return {string}
 */
proto.Cactus.FaceDetect_Mt_Configure.prototype.getMtcnnModelname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.FaceDetect_Mt_Configure} returns this
 */
proto.Cactus.FaceDetect_Mt_Configure.prototype.setMtcnnModelname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 mtcnn_minifacesize = 2;
 * @return {number}
 */
proto.Cactus.FaceDetect_Mt_Configure.prototype.getMtcnnMinifacesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.FaceDetect_Mt_Configure} returns this
 */
proto.Cactus.FaceDetect_Mt_Configure.prototype.setMtcnnMinifacesize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional float mtcnn_factor = 3;
 * @return {number}
 */
proto.Cactus.FaceDetect_Mt_Configure.prototype.getMtcnnFactor = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.FaceDetect_Mt_Configure} returns this
 */
proto.Cactus.FaceDetect_Mt_Configure.prototype.setMtcnnFactor = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float mtcnn_pnet_threshold = 4;
 * @return {number}
 */
proto.Cactus.FaceDetect_Mt_Configure.prototype.getMtcnnPnetThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.FaceDetect_Mt_Configure} returns this
 */
proto.Cactus.FaceDetect_Mt_Configure.prototype.setMtcnnPnetThreshold = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float mtcnn_rnet_threshold = 5;
 * @return {number}
 */
proto.Cactus.FaceDetect_Mt_Configure.prototype.getMtcnnRnetThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.FaceDetect_Mt_Configure} returns this
 */
proto.Cactus.FaceDetect_Mt_Configure.prototype.setMtcnnRnetThreshold = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float mtcnn_onet_threshold = 6;
 * @return {number}
 */
proto.Cactus.FaceDetect_Mt_Configure.prototype.getMtcnnOnetThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.FaceDetect_Mt_Configure} returns this
 */
proto.Cactus.FaceDetect_Mt_Configure.prototype.setMtcnnOnetThreshold = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional int32 faceDetect_filter_minifacearea = 7;
 * @return {number}
 */
proto.Cactus.FaceDetect_Mt_Configure.prototype.getFacedetectFilterMinifacearea = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.FaceDetect_Mt_Configure} returns this
 */
proto.Cactus.FaceDetect_Mt_Configure.prototype.setFacedetectFilterMinifacearea = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.FaceNet_Configure.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.FaceNet_Configure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.FaceNet_Configure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.FaceNet_Configure.toObject = function(includeInstance, msg) {
  var f, obj = {
    modelname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, 0),
    signaturename: jspb.Message.getFieldWithDefault(msg, 3, ""),
    inputnameData: jspb.Message.getFieldWithDefault(msg, 4, ""),
    inputnameIstrain: jspb.Message.getFieldWithDefault(msg, 5, ""),
    outputname0: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.FaceNet_Configure}
 */
proto.Cactus.FaceNet_Configure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.FaceNet_Configure;
  return proto.Cactus.FaceNet_Configure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.FaceNet_Configure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.FaceNet_Configure}
 */
proto.Cactus.FaceNet_Configure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignaturename(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInputnameData(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setInputnameIstrain(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputname0(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.FaceNet_Configure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.FaceNet_Configure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.FaceNet_Configure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.FaceNet_Configure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModelname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getSignaturename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInputnameData();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getInputnameIstrain();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOutputname0();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string modelname = 1;
 * @return {string}
 */
proto.Cactus.FaceNet_Configure.prototype.getModelname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.FaceNet_Configure} returns this
 */
proto.Cactus.FaceNet_Configure.prototype.setModelname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 version = 2;
 * @return {number}
 */
proto.Cactus.FaceNet_Configure.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.FaceNet_Configure} returns this
 */
proto.Cactus.FaceNet_Configure.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string signaturename = 3;
 * @return {string}
 */
proto.Cactus.FaceNet_Configure.prototype.getSignaturename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.FaceNet_Configure} returns this
 */
proto.Cactus.FaceNet_Configure.prototype.setSignaturename = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string inputname_data = 4;
 * @return {string}
 */
proto.Cactus.FaceNet_Configure.prototype.getInputnameData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.FaceNet_Configure} returns this
 */
proto.Cactus.FaceNet_Configure.prototype.setInputnameData = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string inputname_istrain = 5;
 * @return {string}
 */
proto.Cactus.FaceNet_Configure.prototype.getInputnameIstrain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.FaceNet_Configure} returns this
 */
proto.Cactus.FaceNet_Configure.prototype.setInputnameIstrain = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string outputname_0 = 6;
 * @return {string}
 */
proto.Cactus.FaceNet_Configure.prototype.getOutputname0 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.FaceNet_Configure} returns this
 */
proto.Cactus.FaceNet_Configure.prototype.setOutputname0 = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.FaceNetSimilar_Configure.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.FaceNetSimilar_Configure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.FaceNetSimilar_Configure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.FaceNetSimilar_Configure.toObject = function(includeInstance, msg) {
  var f, obj = {
    modelname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, 0),
    signaturename: jspb.Message.getFieldWithDefault(msg, 3, ""),
    inputnameData: jspb.Message.getFieldWithDefault(msg, 4, ""),
    inputnameIstrain: jspb.Message.getFieldWithDefault(msg, 5, ""),
    outputname0: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.FaceNetSimilar_Configure}
 */
proto.Cactus.FaceNetSimilar_Configure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.FaceNetSimilar_Configure;
  return proto.Cactus.FaceNetSimilar_Configure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.FaceNetSimilar_Configure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.FaceNetSimilar_Configure}
 */
proto.Cactus.FaceNetSimilar_Configure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignaturename(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInputnameData(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setInputnameIstrain(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputname0(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.FaceNetSimilar_Configure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.FaceNetSimilar_Configure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.FaceNetSimilar_Configure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.FaceNetSimilar_Configure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModelname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getSignaturename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInputnameData();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getInputnameIstrain();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOutputname0();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string modelname = 1;
 * @return {string}
 */
proto.Cactus.FaceNetSimilar_Configure.prototype.getModelname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.FaceNetSimilar_Configure} returns this
 */
proto.Cactus.FaceNetSimilar_Configure.prototype.setModelname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 version = 2;
 * @return {number}
 */
proto.Cactus.FaceNetSimilar_Configure.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.FaceNetSimilar_Configure} returns this
 */
proto.Cactus.FaceNetSimilar_Configure.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string signaturename = 3;
 * @return {string}
 */
proto.Cactus.FaceNetSimilar_Configure.prototype.getSignaturename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.FaceNetSimilar_Configure} returns this
 */
proto.Cactus.FaceNetSimilar_Configure.prototype.setSignaturename = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string inputname_data = 4;
 * @return {string}
 */
proto.Cactus.FaceNetSimilar_Configure.prototype.getInputnameData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.FaceNetSimilar_Configure} returns this
 */
proto.Cactus.FaceNetSimilar_Configure.prototype.setInputnameData = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string inputname_istrain = 5;
 * @return {string}
 */
proto.Cactus.FaceNetSimilar_Configure.prototype.getInputnameIstrain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.FaceNetSimilar_Configure} returns this
 */
proto.Cactus.FaceNetSimilar_Configure.prototype.setInputnameIstrain = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string outputname_0 = 6;
 * @return {string}
 */
proto.Cactus.FaceNetSimilar_Configure.prototype.getOutputname0 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.FaceNetSimilar_Configure} returns this
 */
proto.Cactus.FaceNetSimilar_Configure.prototype.setOutputname0 = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.FaceDetect_ResNet152.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.FaceDetect_ResNet152.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.FaceDetect_ResNet152} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.FaceDetect_ResNet152.toObject = function(includeInstance, msg) {
  var f, obj = {
    signaturename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, 0),
    inputname0: jspb.Message.getFieldWithDefault(msg, 3, ""),
    outputname0: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.FaceDetect_ResNet152}
 */
proto.Cactus.FaceDetect_ResNet152.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.FaceDetect_ResNet152;
  return proto.Cactus.FaceDetect_ResNet152.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.FaceDetect_ResNet152} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.FaceDetect_ResNet152}
 */
proto.Cactus.FaceDetect_ResNet152.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignaturename(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInputname0(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputname0(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.FaceDetect_ResNet152.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.FaceDetect_ResNet152.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.FaceDetect_ResNet152} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.FaceDetect_ResNet152.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignaturename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getInputname0();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOutputname0();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string signaturename = 1;
 * @return {string}
 */
proto.Cactus.FaceDetect_ResNet152.prototype.getSignaturename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.FaceDetect_ResNet152} returns this
 */
proto.Cactus.FaceDetect_ResNet152.prototype.setSignaturename = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 version = 2;
 * @return {number}
 */
proto.Cactus.FaceDetect_ResNet152.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.FaceDetect_ResNet152} returns this
 */
proto.Cactus.FaceDetect_ResNet152.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string inputname_0 = 3;
 * @return {string}
 */
proto.Cactus.FaceDetect_ResNet152.prototype.getInputname0 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.FaceDetect_ResNet152} returns this
 */
proto.Cactus.FaceDetect_ResNet152.prototype.setInputname0 = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string outputname_0 = 4;
 * @return {string}
 */
proto.Cactus.FaceDetect_ResNet152.prototype.getOutputname0 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.FaceDetect_ResNet152} returns this
 */
proto.Cactus.FaceDetect_ResNet152.prototype.setOutputname0 = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.toObject = function(includeInstance, msg) {
  var f, obj = {
    detectType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    facedetectFilterMinifacearea: jspb.Message.getFieldWithDefault(msg, 2, 0),
    facenetDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    trainDirectory: jspb.Message.getFieldWithDefault(msg, 10, ""),
    identifyDirectory: jspb.Message.getFieldWithDefault(msg, 11, ""),
    isAutoClassify: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    autoVideoNewpersonMaxDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    autoAddtrainMinDistance: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    maxnumfaceAutoClassfiy: jspb.Message.getFieldWithDefault(msg, 15, 0),
    isDumpAddition: jspb.Message.getBooleanFieldWithDefault(msg, 16, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure}
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure;
  return proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure}
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Cactus.FaceDetectType} */ (reader.readEnum());
      msg.setDetectType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFacedetectFilterMinifacearea(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFacenetDistance(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrainDirectory(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifyDirectory(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsAutoClassify(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAutoVideoNewpersonMaxDistance(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAutoAddtrainMinDistance(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxnumfaceAutoClassfiy(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDumpAddition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDetectType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFacedetectFilterMinifacearea();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getFacenetDistance();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = message.getTrainDirectory();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getIdentifyDirectory();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getIsAutoClassify();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getAutoVideoNewpersonMaxDistance();
  if (f !== 0.0) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = message.getAutoAddtrainMinDistance();
  if (f !== 0.0) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = message.getMaxnumfaceAutoClassfiy();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getIsDumpAddition();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
};


/**
 * optional FaceDetectType detect_type = 1;
 * @return {!proto.Cactus.FaceDetectType}
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.prototype.getDetectType = function() {
  return /** @type {!proto.Cactus.FaceDetectType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Cactus.FaceDetectType} value
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure} returns this
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.prototype.setDetectType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 faceDetect_filter_minifacearea = 2;
 * @return {number}
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.prototype.getFacedetectFilterMinifacearea = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure} returns this
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.prototype.setFacedetectFilterMinifacearea = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional float facenet_distance = 9;
 * @return {number}
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.prototype.getFacenetDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure} returns this
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.prototype.setFacenetDistance = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional string train_directory = 10;
 * @return {string}
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.prototype.getTrainDirectory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure} returns this
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.prototype.setTrainDirectory = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string identify_directory = 11;
 * @return {string}
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.prototype.getIdentifyDirectory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure} returns this
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.prototype.setIdentifyDirectory = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional bool is_auto_classify = 12;
 * @return {boolean}
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.prototype.getIsAutoClassify = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure} returns this
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.prototype.setIsAutoClassify = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional float auto_video_newperson_max_distance = 13;
 * @return {number}
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.prototype.getAutoVideoNewpersonMaxDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure} returns this
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.prototype.setAutoVideoNewpersonMaxDistance = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional float auto_addtrain_min_distance = 14;
 * @return {number}
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.prototype.getAutoAddtrainMinDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure} returns this
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.prototype.setAutoAddtrainMinDistance = function(value) {
  return jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional int32 maxnumface_auto_classfiy = 15;
 * @return {number}
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.prototype.getMaxnumfaceAutoClassfiy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure} returns this
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.prototype.setMaxnumfaceAutoClassfiy = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional bool is_dump_addition = 16;
 * @return {boolean}
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.prototype.getIsDumpAddition = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure} returns this
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.prototype.setIsDumpAddition = function(value) {
  return jspb.Message.setProto3BooleanField(this, 16, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure.toObject = function(includeInstance, msg) {
  var f, obj = {
    detectType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    probThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    trainDirectory: jspb.Message.getFieldWithDefault(msg, 3, ""),
    identifyDirectory: jspb.Message.getFieldWithDefault(msg, 4, ""),
    isAutoClassify: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    maxnumfaceAutoClassfiy: jspb.Message.getFieldWithDefault(msg, 6, 0),
    isDumpAddition: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure}
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure;
  return proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure}
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Cactus.FaceDetectType} */ (reader.readEnum());
      msg.setDetectType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setProbThreshold(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrainDirectory(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifyDirectory(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsAutoClassify(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxnumfaceAutoClassfiy(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDumpAddition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDetectType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getProbThreshold();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getTrainDirectory();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIdentifyDirectory();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIsAutoClassify();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getMaxnumfaceAutoClassfiy();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getIsDumpAddition();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional FaceDetectType detect_type = 1;
 * @return {!proto.Cactus.FaceDetectType}
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure.prototype.getDetectType = function() {
  return /** @type {!proto.Cactus.FaceDetectType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Cactus.FaceDetectType} value
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure} returns this
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure.prototype.setDetectType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional float prob_threshold = 2;
 * @return {number}
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure.prototype.getProbThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure} returns this
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure.prototype.setProbThreshold = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional string train_directory = 3;
 * @return {string}
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure.prototype.getTrainDirectory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure} returns this
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure.prototype.setTrainDirectory = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string identify_directory = 4;
 * @return {string}
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure.prototype.getIdentifyDirectory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure} returns this
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure.prototype.setIdentifyDirectory = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool is_auto_classify = 5;
 * @return {boolean}
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure.prototype.getIsAutoClassify = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure} returns this
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure.prototype.setIsAutoClassify = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional int32 maxnumface_auto_classfiy = 6;
 * @return {number}
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure.prototype.getMaxnumfaceAutoClassfiy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure} returns this
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure.prototype.setMaxnumfaceAutoClassfiy = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool is_dump_addition = 7;
 * @return {boolean}
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure.prototype.getIsDumpAddition = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure} returns this
 */
proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure.prototype.setIsDumpAddition = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.AnalysisPic_Configure.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.AnalysisPic_Configure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.AnalysisPic_Configure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.AnalysisPic_Configure.toObject = function(includeInstance, msg) {
  var f, obj = {
    frameInterval: jspb.Message.getFieldWithDefault(msg, 1, 0),
    faceDetectType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    identifyPersonType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.AnalysisPic_Configure}
 */
proto.Cactus.AnalysisPic_Configure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.AnalysisPic_Configure;
  return proto.Cactus.AnalysisPic_Configure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.AnalysisPic_Configure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.AnalysisPic_Configure}
 */
proto.Cactus.AnalysisPic_Configure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFrameInterval(value);
      break;
    case 2:
      var value = /** @type {!proto.Cactus.FaceDetectType} */ (reader.readEnum());
      msg.setFaceDetectType(value);
      break;
    case 3:
      var value = /** @type {!proto.Cactus.IdentifyPersonType} */ (reader.readEnum());
      msg.setIdentifyPersonType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.AnalysisPic_Configure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.AnalysisPic_Configure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.AnalysisPic_Configure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.AnalysisPic_Configure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrameInterval();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getFaceDetectType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getIdentifyPersonType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional int32 frame_interval = 1;
 * @return {number}
 */
proto.Cactus.AnalysisPic_Configure.prototype.getFrameInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.AnalysisPic_Configure} returns this
 */
proto.Cactus.AnalysisPic_Configure.prototype.setFrameInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional FaceDetectType face_detect_type = 2;
 * @return {!proto.Cactus.FaceDetectType}
 */
proto.Cactus.AnalysisPic_Configure.prototype.getFaceDetectType = function() {
  return /** @type {!proto.Cactus.FaceDetectType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Cactus.FaceDetectType} value
 * @return {!proto.Cactus.AnalysisPic_Configure} returns this
 */
proto.Cactus.AnalysisPic_Configure.prototype.setFaceDetectType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional IdentifyPersonType identify_person_type = 3;
 * @return {!proto.Cactus.IdentifyPersonType}
 */
proto.Cactus.AnalysisPic_Configure.prototype.getIdentifyPersonType = function() {
  return /** @type {!proto.Cactus.IdentifyPersonType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.Cactus.IdentifyPersonType} value
 * @return {!proto.Cactus.AnalysisPic_Configure} returns this
 */
proto.Cactus.AnalysisPic_Configure.prototype.setIdentifyPersonType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.FaceNetConfigure.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.FaceNetConfigure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.FaceNetConfigure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.FaceNetConfigure.toObject = function(includeInstance, msg) {
  var f, obj = {
    modelName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.FaceNetConfigure}
 */
proto.Cactus.FaceNetConfigure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.FaceNetConfigure;
  return proto.Cactus.FaceNetConfigure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.FaceNetConfigure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.FaceNetConfigure}
 */
proto.Cactus.FaceNetConfigure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.FaceNetConfigure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.FaceNetConfigure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.FaceNetConfigure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.FaceNetConfigure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModelName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string model_name = 1;
 * @return {string}
 */
proto.Cactus.FaceNetConfigure.prototype.getModelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.FaceNetConfigure} returns this
 */
proto.Cactus.FaceNetConfigure.prototype.setModelName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.CactusConfigure.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.CactusConfigure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.CactusConfigure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.CactusConfigure.toObject = function(includeInstance, msg) {
  var f, obj = {
    openvinomodelserver: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tensorflowmodelserver: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tensorrtmodelserver: jspb.Message.getFieldWithDefault(msg, 3, ""),
    cactusserver: jspb.Message.getFieldWithDefault(msg, 4, ""),
    facenetConfigure: (f = msg.getFacenetConfigure()) && proto.Cactus.FaceNet_Configure.toObject(includeInstance, f),
    facenetsimilarConfigure: (f = msg.getFacenetsimilarConfigure()) && proto.Cactus.FaceNetSimilar_Configure.toObject(includeInstance, f),
    stockpredict1Configure: (f = msg.getStockpredict1Configure()) && proto.Cactus.StockPredict1_Configure.toObject(includeInstance, f),
    facedetectMtConfigure: (f = msg.getFacedetectMtConfigure()) && proto.Cactus.FaceDetect_Mt_Configure.toObject(includeInstance, f),
    facedetectandidentifybypicMfkConfigure: (f = msg.getFacedetectandidentifybypicMfkConfigure()) && proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.toObject(includeInstance, f),
    facedetectandidentifybypicMfsConfigure: (f = msg.getFacedetectandidentifybypicMfsConfigure()) && proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure.toObject(includeInstance, f),
    analysispicConfigure: (f = msg.getAnalysispicConfigure()) && proto.Cactus.AnalysisPic_Configure.toObject(includeInstance, f),
    permanentGroupidMapMap: (f = msg.getPermanentGroupidMapMap()) ? f.toObject(includeInstance, undefined) : [],
    stockpredict1Modelname: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.CactusConfigure}
 */
proto.Cactus.CactusConfigure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.CactusConfigure;
  return proto.Cactus.CactusConfigure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.CactusConfigure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.CactusConfigure}
 */
proto.Cactus.CactusConfigure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOpenvinomodelserver(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTensorflowmodelserver(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTensorrtmodelserver(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCactusserver(value);
      break;
    case 5:
      var value = new proto.Cactus.FaceNet_Configure;
      reader.readMessage(value,proto.Cactus.FaceNet_Configure.deserializeBinaryFromReader);
      msg.setFacenetConfigure(value);
      break;
    case 6:
      var value = new proto.Cactus.FaceNetSimilar_Configure;
      reader.readMessage(value,proto.Cactus.FaceNetSimilar_Configure.deserializeBinaryFromReader);
      msg.setFacenetsimilarConfigure(value);
      break;
    case 7:
      var value = new proto.Cactus.StockPredict1_Configure;
      reader.readMessage(value,proto.Cactus.StockPredict1_Configure.deserializeBinaryFromReader);
      msg.setStockpredict1Configure(value);
      break;
    case 8:
      var value = new proto.Cactus.FaceDetect_Mt_Configure;
      reader.readMessage(value,proto.Cactus.FaceDetect_Mt_Configure.deserializeBinaryFromReader);
      msg.setFacedetectMtConfigure(value);
      break;
    case 9:
      var value = new proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure;
      reader.readMessage(value,proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.deserializeBinaryFromReader);
      msg.setFacedetectandidentifybypicMfkConfigure(value);
      break;
    case 10:
      var value = new proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure;
      reader.readMessage(value,proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure.deserializeBinaryFromReader);
      msg.setFacedetectandidentifybypicMfsConfigure(value);
      break;
    case 11:
      var value = new proto.Cactus.AnalysisPic_Configure;
      reader.readMessage(value,proto.Cactus.AnalysisPic_Configure.deserializeBinaryFromReader);
      msg.setAnalysispicConfigure(value);
      break;
    case 12:
      var value = msg.getPermanentGroupidMapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setStockpredict1Modelname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.CactusConfigure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.CactusConfigure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.CactusConfigure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.CactusConfigure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpenvinomodelserver();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTensorflowmodelserver();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTensorrtmodelserver();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCactusserver();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFacenetConfigure();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Cactus.FaceNet_Configure.serializeBinaryToWriter
    );
  }
  f = message.getFacenetsimilarConfigure();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Cactus.FaceNetSimilar_Configure.serializeBinaryToWriter
    );
  }
  f = message.getStockpredict1Configure();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.Cactus.StockPredict1_Configure.serializeBinaryToWriter
    );
  }
  f = message.getFacedetectMtConfigure();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.Cactus.FaceDetect_Mt_Configure.serializeBinaryToWriter
    );
  }
  f = message.getFacedetectandidentifybypicMfkConfigure();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure.serializeBinaryToWriter
    );
  }
  f = message.getFacedetectandidentifybypicMfsConfigure();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure.serializeBinaryToWriter
    );
  }
  f = message.getAnalysispicConfigure();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.Cactus.AnalysisPic_Configure.serializeBinaryToWriter
    );
  }
  f = message.getPermanentGroupidMapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(12, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getStockpredict1Modelname();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional string OpenvinoModelServer = 1;
 * @return {string}
 */
proto.Cactus.CactusConfigure.prototype.getOpenvinomodelserver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.CactusConfigure} returns this
 */
proto.Cactus.CactusConfigure.prototype.setOpenvinomodelserver = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string TensorflowModelServer = 2;
 * @return {string}
 */
proto.Cactus.CactusConfigure.prototype.getTensorflowmodelserver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.CactusConfigure} returns this
 */
proto.Cactus.CactusConfigure.prototype.setTensorflowmodelserver = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string TensorRtModelServer = 3;
 * @return {string}
 */
proto.Cactus.CactusConfigure.prototype.getTensorrtmodelserver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.CactusConfigure} returns this
 */
proto.Cactus.CactusConfigure.prototype.setTensorrtmodelserver = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string CactusServer = 4;
 * @return {string}
 */
proto.Cactus.CactusConfigure.prototype.getCactusserver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.CactusConfigure} returns this
 */
proto.Cactus.CactusConfigure.prototype.setCactusserver = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional FaceNet_Configure facenet_configure = 5;
 * @return {?proto.Cactus.FaceNet_Configure}
 */
proto.Cactus.CactusConfigure.prototype.getFacenetConfigure = function() {
  return /** @type{?proto.Cactus.FaceNet_Configure} */ (
    jspb.Message.getWrapperField(this, proto.Cactus.FaceNet_Configure, 5));
};


/**
 * @param {?proto.Cactus.FaceNet_Configure|undefined} value
 * @return {!proto.Cactus.CactusConfigure} returns this
*/
proto.Cactus.CactusConfigure.prototype.setFacenetConfigure = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Cactus.CactusConfigure} returns this
 */
proto.Cactus.CactusConfigure.prototype.clearFacenetConfigure = function() {
  return this.setFacenetConfigure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Cactus.CactusConfigure.prototype.hasFacenetConfigure = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional FaceNetSimilar_Configure facenetsimilar_configure = 6;
 * @return {?proto.Cactus.FaceNetSimilar_Configure}
 */
proto.Cactus.CactusConfigure.prototype.getFacenetsimilarConfigure = function() {
  return /** @type{?proto.Cactus.FaceNetSimilar_Configure} */ (
    jspb.Message.getWrapperField(this, proto.Cactus.FaceNetSimilar_Configure, 6));
};


/**
 * @param {?proto.Cactus.FaceNetSimilar_Configure|undefined} value
 * @return {!proto.Cactus.CactusConfigure} returns this
*/
proto.Cactus.CactusConfigure.prototype.setFacenetsimilarConfigure = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Cactus.CactusConfigure} returns this
 */
proto.Cactus.CactusConfigure.prototype.clearFacenetsimilarConfigure = function() {
  return this.setFacenetsimilarConfigure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Cactus.CactusConfigure.prototype.hasFacenetsimilarConfigure = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional StockPredict1_Configure stockpredict1_configure = 7;
 * @return {?proto.Cactus.StockPredict1_Configure}
 */
proto.Cactus.CactusConfigure.prototype.getStockpredict1Configure = function() {
  return /** @type{?proto.Cactus.StockPredict1_Configure} */ (
    jspb.Message.getWrapperField(this, proto.Cactus.StockPredict1_Configure, 7));
};


/**
 * @param {?proto.Cactus.StockPredict1_Configure|undefined} value
 * @return {!proto.Cactus.CactusConfigure} returns this
*/
proto.Cactus.CactusConfigure.prototype.setStockpredict1Configure = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Cactus.CactusConfigure} returns this
 */
proto.Cactus.CactusConfigure.prototype.clearStockpredict1Configure = function() {
  return this.setStockpredict1Configure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Cactus.CactusConfigure.prototype.hasStockpredict1Configure = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional FaceDetect_Mt_Configure facedetect_mt_configure = 8;
 * @return {?proto.Cactus.FaceDetect_Mt_Configure}
 */
proto.Cactus.CactusConfigure.prototype.getFacedetectMtConfigure = function() {
  return /** @type{?proto.Cactus.FaceDetect_Mt_Configure} */ (
    jspb.Message.getWrapperField(this, proto.Cactus.FaceDetect_Mt_Configure, 8));
};


/**
 * @param {?proto.Cactus.FaceDetect_Mt_Configure|undefined} value
 * @return {!proto.Cactus.CactusConfigure} returns this
*/
proto.Cactus.CactusConfigure.prototype.setFacedetectMtConfigure = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Cactus.CactusConfigure} returns this
 */
proto.Cactus.CactusConfigure.prototype.clearFacedetectMtConfigure = function() {
  return this.setFacedetectMtConfigure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Cactus.CactusConfigure.prototype.hasFacedetectMtConfigure = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional FaceDetectAndIdentifyByPic_MFK_Configure facedetectandidentifybypic_mfk_configure = 9;
 * @return {?proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure}
 */
proto.Cactus.CactusConfigure.prototype.getFacedetectandidentifybypicMfkConfigure = function() {
  return /** @type{?proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure} */ (
    jspb.Message.getWrapperField(this, proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure, 9));
};


/**
 * @param {?proto.Cactus.FaceDetectAndIdentifyByPic_MFK_Configure|undefined} value
 * @return {!proto.Cactus.CactusConfigure} returns this
*/
proto.Cactus.CactusConfigure.prototype.setFacedetectandidentifybypicMfkConfigure = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Cactus.CactusConfigure} returns this
 */
proto.Cactus.CactusConfigure.prototype.clearFacedetectandidentifybypicMfkConfigure = function() {
  return this.setFacedetectandidentifybypicMfkConfigure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Cactus.CactusConfigure.prototype.hasFacedetectandidentifybypicMfkConfigure = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional FaceDetectAndIdentifyByPic_MFS_Configure facedetectandidentifybypic_mfs_configure = 10;
 * @return {?proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure}
 */
proto.Cactus.CactusConfigure.prototype.getFacedetectandidentifybypicMfsConfigure = function() {
  return /** @type{?proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure} */ (
    jspb.Message.getWrapperField(this, proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure, 10));
};


/**
 * @param {?proto.Cactus.FaceDetectAndIdentifyByPic_MFS_Configure|undefined} value
 * @return {!proto.Cactus.CactusConfigure} returns this
*/
proto.Cactus.CactusConfigure.prototype.setFacedetectandidentifybypicMfsConfigure = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Cactus.CactusConfigure} returns this
 */
proto.Cactus.CactusConfigure.prototype.clearFacedetectandidentifybypicMfsConfigure = function() {
  return this.setFacedetectandidentifybypicMfsConfigure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Cactus.CactusConfigure.prototype.hasFacedetectandidentifybypicMfsConfigure = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional AnalysisPic_Configure analysispic_configure = 11;
 * @return {?proto.Cactus.AnalysisPic_Configure}
 */
proto.Cactus.CactusConfigure.prototype.getAnalysispicConfigure = function() {
  return /** @type{?proto.Cactus.AnalysisPic_Configure} */ (
    jspb.Message.getWrapperField(this, proto.Cactus.AnalysisPic_Configure, 11));
};


/**
 * @param {?proto.Cactus.AnalysisPic_Configure|undefined} value
 * @return {!proto.Cactus.CactusConfigure} returns this
*/
proto.Cactus.CactusConfigure.prototype.setAnalysispicConfigure = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Cactus.CactusConfigure} returns this
 */
proto.Cactus.CactusConfigure.prototype.clearAnalysispicConfigure = function() {
  return this.setAnalysispicConfigure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Cactus.CactusConfigure.prototype.hasAnalysispicConfigure = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * map<string, string> permanent_groupid_map = 12;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.Cactus.CactusConfigure.prototype.getPermanentGroupidMapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 12, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.Cactus.CactusConfigure} returns this
 */
proto.Cactus.CactusConfigure.prototype.clearPermanentGroupidMapMap = function() {
  this.getPermanentGroupidMapMap().clear();
  return this;};


/**
 * optional string StockPredict1_ModelName = 13;
 * @return {string}
 */
proto.Cactus.CactusConfigure.prototype.getStockpredict1Modelname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.CactusConfigure} returns this
 */
proto.Cactus.CactusConfigure.prototype.setStockpredict1Modelname = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.facethumbnails.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.facethumbnails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.facethumbnails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.facethumbnails.toObject = function(includeInstance, msg) {
  var f, obj = {
    faceid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    facethumbnail: msg.getFacethumbnail_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.facethumbnails}
 */
proto.Cactus.facethumbnails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.facethumbnails;
  return proto.Cactus.facethumbnails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.facethumbnails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.facethumbnails}
 */
proto.Cactus.facethumbnails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFaceid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFacethumbnail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.facethumbnails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.facethumbnails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.facethumbnails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.facethumbnails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFaceid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFacethumbnail_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string faceId = 1;
 * @return {string}
 */
proto.Cactus.facethumbnails.prototype.getFaceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.facethumbnails} returns this
 */
proto.Cactus.facethumbnails.prototype.setFaceid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes faceThumbnail = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Cactus.facethumbnails.prototype.getFacethumbnail = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes faceThumbnail = 2;
 * This is a type-conversion wrapper around `getFacethumbnail()`
 * @return {string}
 */
proto.Cactus.facethumbnails.prototype.getFacethumbnail_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFacethumbnail()));
};


/**
 * optional bytes faceThumbnail = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFacethumbnail()`
 * @return {!Uint8Array}
 */
proto.Cactus.facethumbnails.prototype.getFacethumbnail_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFacethumbnail()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Cactus.facethumbnails} returns this
 */
proto.Cactus.facethumbnails.prototype.setFacethumbnail = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.facePersons.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.facePersons.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.facePersons} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.facePersons.toObject = function(includeInstance, msg) {
  var f, obj = {
    faceid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    personid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    isnewperson: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.facePersons}
 */
proto.Cactus.facePersons.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.facePersons;
  return proto.Cactus.facePersons.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.facePersons} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.facePersons}
 */
proto.Cactus.facePersons.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFaceid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPersonid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsnewperson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.facePersons.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.facePersons.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.facePersons} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.facePersons.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFaceid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPersonid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIsnewperson();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string faceId = 1;
 * @return {string}
 */
proto.Cactus.facePersons.prototype.getFaceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.facePersons} returns this
 */
proto.Cactus.facePersons.prototype.setFaceid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string personId = 2;
 * @return {string}
 */
proto.Cactus.facePersons.prototype.getPersonid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.facePersons} returns this
 */
proto.Cactus.facePersons.prototype.setPersonid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool isNewPerson = 3;
 * @return {boolean}
 */
proto.Cactus.facePersons.prototype.getIsnewperson = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Cactus.facePersons} returns this
 */
proto.Cactus.facePersons.prototype.setIsnewperson = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Cactus.IdentifyPersonByThumbnailsReq.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.IdentifyPersonByThumbnailsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.IdentifyPersonByThumbnailsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.IdentifyPersonByThumbnailsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.IdentifyPersonByThumbnailsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    facesList: jspb.Message.toObjectList(msg.getFacesList(),
    proto.Cactus.facethumbnails.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.IdentifyPersonByThumbnailsReq}
 */
proto.Cactus.IdentifyPersonByThumbnailsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.IdentifyPersonByThumbnailsReq;
  return proto.Cactus.IdentifyPersonByThumbnailsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.IdentifyPersonByThumbnailsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.IdentifyPersonByThumbnailsReq}
 */
proto.Cactus.IdentifyPersonByThumbnailsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.Cactus.facethumbnails;
      reader.readMessage(value,proto.Cactus.facethumbnails.deserializeBinaryFromReader);
      msg.addFaces(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.IdentifyPersonByThumbnailsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.IdentifyPersonByThumbnailsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.IdentifyPersonByThumbnailsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.IdentifyPersonByThumbnailsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getFacesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Cactus.facethumbnails.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.Cactus.IdentifyPersonByThumbnailsReq.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.IdentifyPersonByThumbnailsReq} returns this
 */
proto.Cactus.IdentifyPersonByThumbnailsReq.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated facethumbnails faces = 2;
 * @return {!Array<!proto.Cactus.facethumbnails>}
 */
proto.Cactus.IdentifyPersonByThumbnailsReq.prototype.getFacesList = function() {
  return /** @type{!Array<!proto.Cactus.facethumbnails>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Cactus.facethumbnails, 2));
};


/**
 * @param {!Array<!proto.Cactus.facethumbnails>} value
 * @return {!proto.Cactus.IdentifyPersonByThumbnailsReq} returns this
*/
proto.Cactus.IdentifyPersonByThumbnailsReq.prototype.setFacesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Cactus.facethumbnails=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Cactus.facethumbnails}
 */
proto.Cactus.IdentifyPersonByThumbnailsReq.prototype.addFaces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Cactus.facethumbnails, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Cactus.IdentifyPersonByThumbnailsReq} returns this
 */
proto.Cactus.IdentifyPersonByThumbnailsReq.prototype.clearFacesList = function() {
  return this.setFacesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Cactus.IdentifyPersonByThumbnailsRsp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.IdentifyPersonByThumbnailsRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.IdentifyPersonByThumbnailsRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.IdentifyPersonByThumbnailsRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.IdentifyPersonByThumbnailsRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    predictpersonsList: jspb.Message.toObjectList(msg.getPredictpersonsList(),
    proto.Cactus.facePersons.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.IdentifyPersonByThumbnailsRsp}
 */
proto.Cactus.IdentifyPersonByThumbnailsRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.IdentifyPersonByThumbnailsRsp;
  return proto.Cactus.IdentifyPersonByThumbnailsRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.IdentifyPersonByThumbnailsRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.IdentifyPersonByThumbnailsRsp}
 */
proto.Cactus.IdentifyPersonByThumbnailsRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.Cactus.facePersons;
      reader.readMessage(value,proto.Cactus.facePersons.deserializeBinaryFromReader);
      msg.addPredictpersons(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.IdentifyPersonByThumbnailsRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.IdentifyPersonByThumbnailsRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.IdentifyPersonByThumbnailsRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.IdentifyPersonByThumbnailsRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPredictpersonsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Cactus.facePersons.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.Cactus.IdentifyPersonByThumbnailsRsp.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.IdentifyPersonByThumbnailsRsp} returns this
 */
proto.Cactus.IdentifyPersonByThumbnailsRsp.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated facePersons predictPersons = 2;
 * @return {!Array<!proto.Cactus.facePersons>}
 */
proto.Cactus.IdentifyPersonByThumbnailsRsp.prototype.getPredictpersonsList = function() {
  return /** @type{!Array<!proto.Cactus.facePersons>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Cactus.facePersons, 2));
};


/**
 * @param {!Array<!proto.Cactus.facePersons>} value
 * @return {!proto.Cactus.IdentifyPersonByThumbnailsRsp} returns this
*/
proto.Cactus.IdentifyPersonByThumbnailsRsp.prototype.setPredictpersonsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Cactus.facePersons=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Cactus.facePersons}
 */
proto.Cactus.IdentifyPersonByThumbnailsRsp.prototype.addPredictpersons = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Cactus.facePersons, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Cactus.IdentifyPersonByThumbnailsRsp} returns this
 */
proto.Cactus.IdentifyPersonByThumbnailsRsp.prototype.clearPredictpersonsList = function() {
  return this.setPredictpersonsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.FaceDetectReq.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.FaceDetectReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.FaceDetectReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.FaceDetectReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    picdata: msg.getPicdata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.FaceDetectReq}
 */
proto.Cactus.FaceDetectReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.FaceDetectReq;
  return proto.Cactus.FaceDetectReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.FaceDetectReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.FaceDetectReq}
 */
proto.Cactus.FaceDetectReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPicdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.FaceDetectReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.FaceDetectReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.FaceDetectReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.FaceDetectReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPicdata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.Cactus.FaceDetectReq.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.FaceDetectReq} returns this
 */
proto.Cactus.FaceDetectReq.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes picdata = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Cactus.FaceDetectReq.prototype.getPicdata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes picdata = 2;
 * This is a type-conversion wrapper around `getPicdata()`
 * @return {string}
 */
proto.Cactus.FaceDetectReq.prototype.getPicdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPicdata()));
};


/**
 * optional bytes picdata = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPicdata()`
 * @return {!Uint8Array}
 */
proto.Cactus.FaceDetectReq.prototype.getPicdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPicdata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Cactus.FaceDetectReq} returns this
 */
proto.Cactus.FaceDetectReq.prototype.setPicdata = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Cactus.FaceDetectRsp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.FaceDetectRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.FaceDetectRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.FaceDetectRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.FaceDetectRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    positionsList: jspb.Message.toObjectList(msg.getPositionsList(),
    proto.Cactus.Position.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.FaceDetectRsp}
 */
proto.Cactus.FaceDetectRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.FaceDetectRsp;
  return proto.Cactus.FaceDetectRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.FaceDetectRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.FaceDetectRsp}
 */
proto.Cactus.FaceDetectRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.Cactus.Position;
      reader.readMessage(value,proto.Cactus.Position.deserializeBinaryFromReader);
      msg.addPositions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.FaceDetectRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.FaceDetectRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.FaceDetectRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.FaceDetectRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPositionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Cactus.Position.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.Cactus.FaceDetectRsp.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.FaceDetectRsp} returns this
 */
proto.Cactus.FaceDetectRsp.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Position positions = 2;
 * @return {!Array<!proto.Cactus.Position>}
 */
proto.Cactus.FaceDetectRsp.prototype.getPositionsList = function() {
  return /** @type{!Array<!proto.Cactus.Position>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Cactus.Position, 2));
};


/**
 * @param {!Array<!proto.Cactus.Position>} value
 * @return {!proto.Cactus.FaceDetectRsp} returns this
*/
proto.Cactus.FaceDetectRsp.prototype.setPositionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Cactus.Position=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Cactus.Position}
 */
proto.Cactus.FaceDetectRsp.prototype.addPositions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Cactus.Position, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Cactus.FaceDetectRsp} returns this
 */
proto.Cactus.FaceDetectRsp.prototype.clearPositionsList = function() {
  return this.setPositionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.DetectAndIdentifyInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.DetectAndIdentifyInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.DetectAndIdentifyInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.DetectAndIdentifyInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    top: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    left: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    height: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    width: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    personid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    isnewperson: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.DetectAndIdentifyInfo}
 */
proto.Cactus.DetectAndIdentifyInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.DetectAndIdentifyInfo;
  return proto.Cactus.DetectAndIdentifyInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.DetectAndIdentifyInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.DetectAndIdentifyInfo}
 */
proto.Cactus.DetectAndIdentifyInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTop(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLeft(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWidth(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPersonid(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsnewperson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.DetectAndIdentifyInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.DetectAndIdentifyInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.DetectAndIdentifyInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.DetectAndIdentifyInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTop();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getLeft();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getPersonid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIsnewperson();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional float top = 1;
 * @return {number}
 */
proto.Cactus.DetectAndIdentifyInfo.prototype.getTop = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.DetectAndIdentifyInfo} returns this
 */
proto.Cactus.DetectAndIdentifyInfo.prototype.setTop = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float left = 2;
 * @return {number}
 */
proto.Cactus.DetectAndIdentifyInfo.prototype.getLeft = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.DetectAndIdentifyInfo} returns this
 */
proto.Cactus.DetectAndIdentifyInfo.prototype.setLeft = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float height = 3;
 * @return {number}
 */
proto.Cactus.DetectAndIdentifyInfo.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.DetectAndIdentifyInfo} returns this
 */
proto.Cactus.DetectAndIdentifyInfo.prototype.setHeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float width = 4;
 * @return {number}
 */
proto.Cactus.DetectAndIdentifyInfo.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.DetectAndIdentifyInfo} returns this
 */
proto.Cactus.DetectAndIdentifyInfo.prototype.setWidth = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional string personId = 5;
 * @return {string}
 */
proto.Cactus.DetectAndIdentifyInfo.prototype.getPersonid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.DetectAndIdentifyInfo} returns this
 */
proto.Cactus.DetectAndIdentifyInfo.prototype.setPersonid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool isNewPerson = 6;
 * @return {boolean}
 */
proto.Cactus.DetectAndIdentifyInfo.prototype.getIsnewperson = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Cactus.DetectAndIdentifyInfo} returns this
 */
proto.Cactus.DetectAndIdentifyInfo.prototype.setIsnewperson = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.FaceDetectAndIdentifyByPicReq.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.FaceDetectAndIdentifyByPicReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.FaceDetectAndIdentifyByPicReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.FaceDetectAndIdentifyByPicReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    groupid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    picdata: msg.getPicdata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPicReq}
 */
proto.Cactus.FaceDetectAndIdentifyByPicReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.FaceDetectAndIdentifyByPicReq;
  return proto.Cactus.FaceDetectAndIdentifyByPicReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.FaceDetectAndIdentifyByPicReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPicReq}
 */
proto.Cactus.FaceDetectAndIdentifyByPicReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPicdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.FaceDetectAndIdentifyByPicReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.FaceDetectAndIdentifyByPicReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.FaceDetectAndIdentifyByPicReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.FaceDetectAndIdentifyByPicReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getGroupid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPicdata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.Cactus.FaceDetectAndIdentifyByPicReq.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPicReq} returns this
 */
proto.Cactus.FaceDetectAndIdentifyByPicReq.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string groupid = 2;
 * @return {string}
 */
proto.Cactus.FaceDetectAndIdentifyByPicReq.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPicReq} returns this
 */
proto.Cactus.FaceDetectAndIdentifyByPicReq.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes picdata = 3;
 * @return {!(string|Uint8Array)}
 */
proto.Cactus.FaceDetectAndIdentifyByPicReq.prototype.getPicdata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes picdata = 3;
 * This is a type-conversion wrapper around `getPicdata()`
 * @return {string}
 */
proto.Cactus.FaceDetectAndIdentifyByPicReq.prototype.getPicdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPicdata()));
};


/**
 * optional bytes picdata = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPicdata()`
 * @return {!Uint8Array}
 */
proto.Cactus.FaceDetectAndIdentifyByPicReq.prototype.getPicdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPicdata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPicReq} returns this
 */
proto.Cactus.FaceDetectAndIdentifyByPicReq.prototype.setPicdata = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Cactus.FaceDetectAndIdentifyByPicRsp.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.FaceDetectAndIdentifyByPicRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.FaceDetectAndIdentifyByPicRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.FaceDetectAndIdentifyByPicRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.FaceDetectAndIdentifyByPicRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    groupid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    personinfosList: jspb.Message.toObjectList(msg.getPersoninfosList(),
    proto.Cactus.DetectAndIdentifyInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPicRsp}
 */
proto.Cactus.FaceDetectAndIdentifyByPicRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.FaceDetectAndIdentifyByPicRsp;
  return proto.Cactus.FaceDetectAndIdentifyByPicRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.FaceDetectAndIdentifyByPicRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPicRsp}
 */
proto.Cactus.FaceDetectAndIdentifyByPicRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    case 3:
      var value = new proto.Cactus.DetectAndIdentifyInfo;
      reader.readMessage(value,proto.Cactus.DetectAndIdentifyInfo.deserializeBinaryFromReader);
      msg.addPersoninfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.FaceDetectAndIdentifyByPicRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.FaceDetectAndIdentifyByPicRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.FaceDetectAndIdentifyByPicRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.FaceDetectAndIdentifyByPicRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getGroupid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPersoninfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Cactus.DetectAndIdentifyInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.Cactus.FaceDetectAndIdentifyByPicRsp.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPicRsp} returns this
 */
proto.Cactus.FaceDetectAndIdentifyByPicRsp.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string groupid = 2;
 * @return {string}
 */
proto.Cactus.FaceDetectAndIdentifyByPicRsp.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPicRsp} returns this
 */
proto.Cactus.FaceDetectAndIdentifyByPicRsp.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated DetectAndIdentifyInfo personinfos = 3;
 * @return {!Array<!proto.Cactus.DetectAndIdentifyInfo>}
 */
proto.Cactus.FaceDetectAndIdentifyByPicRsp.prototype.getPersoninfosList = function() {
  return /** @type{!Array<!proto.Cactus.DetectAndIdentifyInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Cactus.DetectAndIdentifyInfo, 3));
};


/**
 * @param {!Array<!proto.Cactus.DetectAndIdentifyInfo>} value
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPicRsp} returns this
*/
proto.Cactus.FaceDetectAndIdentifyByPicRsp.prototype.setPersoninfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Cactus.DetectAndIdentifyInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Cactus.DetectAndIdentifyInfo}
 */
proto.Cactus.FaceDetectAndIdentifyByPicRsp.prototype.addPersoninfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Cactus.DetectAndIdentifyInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Cactus.FaceDetectAndIdentifyByPicRsp} returns this
 */
proto.Cactus.FaceDetectAndIdentifyByPicRsp.prototype.clearPersoninfosList = function() {
  return this.setPersoninfosList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Cactus.StockPredict1Req.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.StockPredict1Req.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.StockPredict1Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.StockPredict1Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.StockPredict1Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    model: jspb.Message.getFieldWithDefault(msg, 1, ""),
    closepriceList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f,
    holdposition: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    floatcaptionpoints: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.StockPredict1Req}
 */
proto.Cactus.StockPredict1Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.StockPredict1Req;
  return proto.Cactus.StockPredict1Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.StockPredict1Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.StockPredict1Req}
 */
proto.Cactus.StockPredict1Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModel(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setClosepriceList(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHoldposition(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFloatcaptionpoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.StockPredict1Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.StockPredict1Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.StockPredict1Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.StockPredict1Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClosepriceList();
  if (f.length > 0) {
    writer.writePackedFloat(
      2,
      f
    );
  }
  f = message.getHoldposition();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getFloatcaptionpoints();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional string model = 1;
 * @return {string}
 */
proto.Cactus.StockPredict1Req.prototype.getModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.StockPredict1Req} returns this
 */
proto.Cactus.StockPredict1Req.prototype.setModel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated float closePrice = 2;
 * @return {!Array<number>}
 */
proto.Cactus.StockPredict1Req.prototype.getClosepriceList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Cactus.StockPredict1Req} returns this
 */
proto.Cactus.StockPredict1Req.prototype.setClosepriceList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Cactus.StockPredict1Req} returns this
 */
proto.Cactus.StockPredict1Req.prototype.addCloseprice = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Cactus.StockPredict1Req} returns this
 */
proto.Cactus.StockPredict1Req.prototype.clearClosepriceList = function() {
  return this.setClosepriceList([]);
};


/**
 * optional float holdPosition = 3;
 * @return {number}
 */
proto.Cactus.StockPredict1Req.prototype.getHoldposition = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.StockPredict1Req} returns this
 */
proto.Cactus.StockPredict1Req.prototype.setHoldposition = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float floatCaptionPoints = 4;
 * @return {number}
 */
proto.Cactus.StockPredict1Req.prototype.getFloatcaptionpoints = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Cactus.StockPredict1Req} returns this
 */
proto.Cactus.StockPredict1Req.prototype.setFloatcaptionpoints = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.StockPredict1Rsp.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.StockPredict1Rsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.StockPredict1Rsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.StockPredict1Rsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    op: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.StockPredict1Rsp}
 */
proto.Cactus.StockPredict1Rsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.StockPredict1Rsp;
  return proto.Cactus.StockPredict1Rsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.StockPredict1Rsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.StockPredict1Rsp}
 */
proto.Cactus.StockPredict1Rsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Cactus.STOCKOP} */ (reader.readEnum());
      msg.setOp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.StockPredict1Rsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.StockPredict1Rsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.StockPredict1Rsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.StockPredict1Rsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOp();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional STOCKOP op = 1;
 * @return {!proto.Cactus.STOCKOP}
 */
proto.Cactus.StockPredict1Rsp.prototype.getOp = function() {
  return /** @type {!proto.Cactus.STOCKOP} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Cactus.STOCKOP} value
 * @return {!proto.Cactus.StockPredict1Rsp} returns this
 */
proto.Cactus.StockPredict1Rsp.prototype.setOp = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.Cactus.StockPredict1Rsp.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.StockPredict1Rsp} returns this
 */
proto.Cactus.StockPredict1Rsp.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.HelloReq.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.HelloReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.HelloReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.HelloReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    ask: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.HelloReq}
 */
proto.Cactus.HelloReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.HelloReq;
  return proto.Cactus.HelloReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.HelloReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.HelloReq}
 */
proto.Cactus.HelloReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.HelloReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.HelloReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.HelloReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.HelloReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAsk();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ask = 1;
 * @return {string}
 */
proto.Cactus.HelloReq.prototype.getAsk = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.HelloReq} returns this
 */
proto.Cactus.HelloReq.prototype.setAsk = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Cactus.HelloRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.Cactus.HelloRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Cactus.HelloRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.HelloRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Cactus.HelloRsp}
 */
proto.Cactus.HelloRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Cactus.HelloRsp;
  return proto.Cactus.HelloRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Cactus.HelloRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Cactus.HelloRsp}
 */
proto.Cactus.HelloRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Cactus.HelloRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Cactus.HelloRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Cactus.HelloRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Cactus.HelloRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string response = 1;
 * @return {string}
 */
proto.Cactus.HelloRsp.prototype.getResponse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Cactus.HelloRsp} returns this
 */
proto.Cactus.HelloRsp.prototype.setResponse = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.Cactus.TrackStatus = {
  TRACK_NONE: 0,
  TRACK_APPEAR: 1,
  TRACK_TRACKING: 2,
  TRACK_DISAPPEAR: 3
};

/**
 * @enum {number}
 */
proto.Cactus.FaceDetectType = {
  TF_MTCNN_DETECT: 0,
  OPVINO_RESNET152_DETECT: 1
};

/**
 * @enum {number}
 */
proto.Cactus.IdentifyPersonType = {
  IDENTIFY_PERSON_NONE: 0,
  IDENTIFY_PERSON_MFK: 1,
  IDENTIFY_PERSON_MFS: 2
};

/**
 * @enum {number}
 */
proto.Cactus.STOCKOP = {
  HOLD: 0,
  SELL: 1,
  BUY: 2
};

goog.object.extend(exports, proto.Cactus);
